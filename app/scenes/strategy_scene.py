"""Strategy scene for initial user segmentation and strategy selection."""

from typing import Dict, Optional

from app.models import User, UserSegment, FunnelStage
from app.services.llm_service import LLMResponse
from .base_scene import BaseScene, SceneState, SceneResponse


class StrategyScene(BaseScene):
    """Scene for strategy selection and initial user engagement."""
    
    def __init__(self, session):
        super().__init__(session)
        self.scene_name = "strategy"
    
    async def apply_scene_policy(
        self, 
        user: User, 
        llm_response: LLMResponse, 
        state: SceneState
    ) -> LLMResponse:
        """Apply strategy scene specific policy."""
        
        # Strategy scene focuses on guiding users to make a choice
        if llm_response.next_action == "offer_payment":
            # Too early for payment in strategy scene
            llm_response.next_action = "ask_preferences"
            
        # If user seems confused, guide them to survey
        if llm_response.confidence < 0.6:
            llm_response.next_action = "guide_to_survey"
            
        # Ensure we're building towards a decision
        if state.attempts_count > 2 and llm_response.next_action == "ask":
            llm_response.next_action = "push_decision"
            
        return llm_response
    
    async def determine_next_scene(
        self, 
        user: User, 
        llm_response: LLMResponse, 
        state: SceneState
    ) -> Optional[str]:
        """Determine if should transition to another scene."""
        
        # If user has chosen a strategy and has segment, move to appropriate scene
        if user.segment and llm_response.next_action in ["offer_consult", "show_materials"]:
            if user.segment == UserSegment.COLD:
                return "newbie"
            elif user.segment == UserSegment.WARM:
                return "trader"
            elif user.segment == UserSegment.HOT:
                return "investor"
        
        # If user completed survey, determine scene based on score
        if user.lead_score > 0:
            if user.lead_score <= 5:
                return "newbie"
            elif user.lead_score <= 10:
                return "trader"
            else:
                return "investor"
        
        # Stay in strategy scene for continued guidance
        return None
    
    def get_scene_prompts(self) -> Dict[str, str]:
        """Get strategy scene specific prompts."""
        return {
            "system_addition": """
–°–¶–ï–ù–ê–†–ò–ô: –í–´–ë–û–† –°–¢–†–ê–¢–ï–ì–ò–ò

–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.

–¢–í–û–Ø –¶–ï–õ–¨:
- –û–±—ä—è—Å–Ω–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–æ—Å—Ç–∞
- –ü–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–¥–µ–ª–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä
- –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã

–î–û–°–¢–£–ü–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:
1. –ù–ê–î–Å–ñ–ù–û–°–¢–¨ - –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, —Ñ–æ–∫—É—Å –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
2. –†–û–°–¢ - –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤, —Ñ–æ–∫—É—Å –Ω–∞ –≤—ã—Å–æ–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏

–õ–û–ì–ò–ö–ê –û–¢–í–ï–¢–û–í:
- ask_preferences: —É–∑–Ω–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- guide_to_survey: –Ω–∞–ø—Ä–∞–≤—å –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
- push_decision: –º—è–≥–∫–æ –ø–æ–¥—Ç–æ–ª–∫–Ω–∏ –∫ –≤—ã–±–æ—Ä—É
- show_materials: –ø–æ–∫–∞–∂–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

–ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ.
""",
            "examples": """
–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:
"üéØ –ü–æ–Ω–∏–º–∞—é, –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!

–ï—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ:
üõ° **–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å** - –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–º, –∫—Ç–æ —Ü–µ–Ω–∏—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –≥–æ—Ç–æ–≤ –∫ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º
üöÄ **–†–æ—Å—Ç** - –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –≥–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—Ç—å —Ä—ã–Ω–æ–∫ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–∏—Å–∫–∏ —Ä–∞–¥–∏ –≤—ã—Å–æ–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏

–ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —Ç–µ–±–µ –±–ª–∏–∂–µ –ø–æ –¥—É—Ö—É? ü§î"
"""
        }
    
    async def get_strategy_specific_materials(self, strategy_type: str, user: User):
        """Get materials specific to chosen strategy."""
        if strategy_type == "safety":
            return await self.materials_service.get_materials_by_context(
                context="safety_concerns",
                segment=user.segment or UserSegment.COLD,
                limit=3
            )
        elif strategy_type == "growth":
            return await self.materials_service.get_materials_by_context(
                context="advanced_strategies", 
                segment=user.segment or UserSegment.WARM,
                limit=3
            )
        
        return []
    
    async def create_strategy_response(
        self, 
        strategy_type: str, 
        user: User
    ) -> SceneResponse:
        """Create response for specific strategy selection."""
        
        if strategy_type == "safety":
            message = """üõ° **–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ - —ç—Ç–æ –º—É–¥—Ä—ã–π –ø–æ–¥—Ö–æ–¥.**

**–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:**
‚úÖ –ò–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚úÖ –¢–æ–ø–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏  
‚úÖ –°—Ç–µ–π–∫–∏–Ω–≥ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
‚úÖ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è

üí° *–≠—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–º–æ–∂–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–æ–π—Ç–∏ –≤ –∫—Ä–∏–ø—Ç–æ–º–∏—Ä –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å –∫–∞–ø–∏—Ç–∞–ª.*

–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ–±—É—á–µ–Ω–∏—è? üìö"""
            
            buttons = [
                {"text": "üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "callback_data": "survey:start"},
                {"text": "üìû –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "callback_data": "consult:offer"},
                {"text": "üìö –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "callback_data": "materials:safety"}
            ]
            
        else:  # growth strategy
            message = """üöÄ **–ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–π –≤—ã–±–æ—Ä! –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–æ—Å—Ç–∞ –¥–ª—è —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω—ã—Ö.**

**–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:**
‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚úÖ –ü–æ–∏—Å–∫ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º

‚ö†Ô∏è *–ü–æ–º–Ω–∏: –≤—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–∏—Ö –∑–Ω–∞–Ω–∏–π –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∏—Å–∫–∞–º.*

–ì–æ—Ç–æ–≤ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é? üìà"""
            
            buttons = [
                {"text": "üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "callback_data": "survey:start"},
                {"text": "üìû –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "callback_data": "consult:offer"},
                {"text": "üìö –ü–æ–∫–∞–∑–∞—Ç—å –∫–µ–π—Å—ã —Ä–æ—Å—Ç–∞", "callback_data": "materials:growth"}
            ]
        
        return SceneResponse(
            message_text=message,
            buttons=buttons,
            log_event={
                "scene": self.scene_name,
                "action": "strategy_selected",
                "strategy": strategy_type
            }
        )