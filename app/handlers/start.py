"""Start command and welcome flow handlers."""

import asyncio
from typing import Optional

import structlog
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, FSInputFile, InlineKeyboardButton,
                           Message)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.config import settings
from app.handlers.survey import start_survey_via_message
from app.models import User
from app.services.bonus_content_manager import BonusContentManager
from app.services.logging_service import ConversationLoggingService
from app.services.priority_analysis_service import (ConfirmationIntent,
                                                    PriorityAnalysisService,
                                                    PriorityIntent)
from app.services.user_service import UserService
from app.utils.callbacks import Callbacks

router = Router()
logger = structlog.get_logger()


class DeclinedSurveyStates(StatesGroup):
    """FSM states for strategy discussion after survey decline."""

    waiting_priority_choice = State()
    waiting_reliability_confirmation = State()
    waiting_growth_confirmation = State()


analysis_service = PriorityAnalysisService()

RELIABILITY_MESSAGE = """–ö—Ä—É—Ç–æ, –ø–æ–Ω–∏–º–∞—é üëç –í –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º —Ä—ã–Ω–∫–µ –ø–æ–¥ ¬´–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å¬ª –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –≤ –≤–∏–¥—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é.
 –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
–°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã (USDT, USDC, DAI) ‚Äî —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä–æ–≤–æ–π –ø—Ä–∏–≤—è–∑–∫–µ, –∏—Ö –∫—É—Ä—Å –ø–æ—á—Ç–∏ –Ω–µ –∫–æ–ª–µ–±–ª–µ—Ç—Å—è.

–°—Ç–µ–π–∫–∏–Ω–≥ –Ω–∞–¥—ë–∂–Ω—ã—Ö –º–æ–Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä ETH) ‚Äî –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å 3‚Äì5% –≥–æ–¥–æ–≤—ã—Ö, –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∞ –º–æ–Ω–µ—Ç—É –≤ —Å–µ—Ç–∏.

–î–æ—Ö–æ–¥–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å—Ç–µ–π–±–ª–∞—Ö ‚Äî —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤ –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö DeFi-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞.

üëâ –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–Ω–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–ø–∏—Ç–∞–ª. –•–æ—á–µ—à—å?"""

GROWTH_MESSAGE = """–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä üî• –í –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ —Ä–æ—Å—Ç —Å–≤—è–∑–∞–Ω —Å –±–æ–ª–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–º–∏, –Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–æ—Ö–æ–¥–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.
 –ù–∞–ø—Ä–∏–º–µ—Ä:
–¢–æ–ø–æ–≤—ã–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã (ETH, BNB, SOL, DOT) ‚Äî –ø—Ä–æ–µ–∫—Ç—ã —Å —Å–∏–ª—å–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞—Å—Ç–∏ –≤ —Ü–µ–Ω–µ.

DeFi-—Ç–æ–∫–µ–Ω—ã ‚Äî –º–æ–Ω–µ—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –∏ –¥–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å ¬´–ø–æ–π–º–∞—Ç—å —Ä–æ—Å—Ç¬ª –Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —Å—Ç–∞–¥–∏—è—Ö.

NFT –∏–ª–∏ GameFi-—Å–µ–∫—Ç–æ—Ä–∞ ‚Äî –±–æ–ª–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç –∫—Ä–∞—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

üëâ –•–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∂—É –Ω–∞ —á–µ–º –Ω–∞—à–∏ —É—á–µ–Ω–∏–∫–∏ –∫—Ä–∞—Ç–Ω–æ —É–º–Ω–æ–∂–∏–ª–∏ —Å–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞—Å—Ç–∏ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –ø–ª–∞–Ω–µ?"""

RELIABILITY_DECLINE_MESSAGE = (
    "–û–∫–µ–π, –ø–æ–Ω—è–ª üôÇ –Ø –Ω–∏–∫—É–¥–∞ –Ω–µ —Ç–æ—Ä–æ–ø–ª—é. –î–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–µ–º—Å—è –Ω–∞ —Å–≤—è–∑–∏ ‚Äî –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å –∏–ª–∏ –≤—Ä–µ–º—è, "
    "—è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏. –ê –ø–æ–∫–∞ –º–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±–µ —É–∂–µ –∑–Ω–∞–∫–æ–º–æ –≤ –∫—Ä–∏–ø—Ç–µ ‚Äî —Å —á–µ–≥–æ —Ç—ã –Ω–∞—á–∏–Ω–∞–ª?"
)

GROWTH_DECLINE_MESSAGE = (
    "–û–∫–µ–π, –ø–æ–Ω—è–ª —Ç–µ–±—è üôÇ –î–∞–≤–∞–π —Ç–æ–≥–¥–∞ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —ç—Ç—É —Ç–µ–º—É. –ö–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å ‚Äî —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ "
    "–ø–æ–¥ —Ç–≤–æ–∏ —Ü–µ–ª–∏. –ß—Ç–æ–±—ã –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º, –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —è –≤—Å–µ–≥–¥–∞ –º–æ–≥ —Ç–µ–±–µ –ø–æ–º–æ—á—å "
    "–ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º —Ä—ã–Ω–∫–µ –∏ –¥–∞–ª—å—à–µ - "
)

APPLICATION_PROMPT_MESSAGE = (
    "üìù –û—Ç–ª–∏—á–Ω–æ! –ù–∏–∂–µ –∫–Ω–æ–ø–∫–∞ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º–æ–π –∑–∞—è–≤–∫–∏. –ó–∞–ø–æ–ª–Ω–∏ –µ—ë, –∏ —è –ø–µ—Ä–µ–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–µ."
)

CLARIFICATION_MESSAGE = (
    "–•–æ—á—É —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–µ–±—è –ø–æ–Ω—è–ª. –ß—Ç–æ –¥–ª—è —Ç–µ–±—è —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ: –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞?"
)

CONFIRMATION_CLARIFICATION_MESSAGE = (
    "–ü–æ–¥—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∏–º? –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–º ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª."
)

@router.message(Command("start"))
async def start_command(message: Message, **kwargs):
    """Handle /start command and offer a bonus."""
    try:
        session = kwargs.get("session")
        user_service = UserService(session)
        user = await user_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
        )

        welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —à–∫–æ–ª—ã –ê–∑–∞—Ç–∞ –í–∞–ª–µ–µ–≤–∞ üéâ
–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–æ–¥–∞—Ä–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –±–æ–Ω—É—Å üéÅ"""

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å",
            callback_data="bonus:get_file"
        ))

        await message.answer(
            welcome_text,
            reply_markup=keyboard.as_markup()
        )

        logger.info("Start command processed, bonus offered", user_id=user.id)

    except Exception as e:
        logger.error("Error in start command", error=str(e), exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "bonus:get_file")
async def send_bonus_file(callback: CallbackQuery, **kwargs):
    """Send the bonus file and a follow-up message."""
    try:
        await callback.answer("üéÅ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à –±–æ–Ω—É—Å...")

        bonus_file_path, bonus_caption = BonusContentManager.load_published_bonus()
        document = FSInputFile(bonus_file_path)

        await callback.message.answer_document(
            document,
            caption=bonus_caption
        )
        logger.info("Bonus file sent", user_id=callback.from_user.id)

        await asyncio.sleep(settings.bonus_followup_delay)

        user_name = callback.from_user.first_name or "–¥—Ä—É–≥"
        follow_up_text = (
            f"{user_name}, —Ö–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî "
            "–ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ. "
            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ –∏–ª–∏ –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–ª—è —Ä–æ—Å—Ç–∞. "
            "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?"
        )

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="ü§ë –î–ê",
            callback_data=Callbacks.SURVEY_START
        ))
        keyboard.add(InlineKeyboardButton(
            text="üòû –ù–µ—Ç",
            callback_data="bonus:followup_no"
        ))

        await callback.message.answer(
            follow_up_text,
            reply_markup=keyboard.as_markup()
        )
        logger.info("Bonus follow-up sent", user_id=callback.from_user.id)

    except Exception as e:
        logger.error("Error sending bonus file or follow-up", error=str(e), exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "bonus:followup_no")
async def handle_bonus_followup_no(
    callback: CallbackQuery,
    state: FSMContext,
    user: Optional[User] = None,
    **kwargs,
):
    """Handle the 'No' response to the bonus follow-up."""

    session = kwargs.get("session")
    conversation_logger = ConversationLoggingService(session) if session else None
    user_id = getattr(user, "id", None) or getattr(callback.from_user, "id", None)

    try:
        await callback.answer()

        response_text = (
            "–ü–æ–Ω—è–ª —Ç–µ–±—è. –î–∞–∂–µ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ –≥–æ—Ç–æ–≤ –≤—ã–±–∏—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, "
            "–º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –æ–±—Å—É–¥–∏—Ç—å –æ–±—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç –≤—Ä–µ–º—è. "
            "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ: –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞?"
        )

        message = callback.message
        if conversation_logger and message is not None:
            await conversation_logger.send_or_edit(
                message,
                text=response_text,
                user_id=user_id,
                prefer_edit=True,
            )
        elif message is not None:
            await message.edit_text(response_text)

        await state.set_state(DeclinedSurveyStates.waiting_priority_choice)
        logger.info(
            "survey_decline_followup_offered",
            user_id=user_id,
        )

    except Exception as e:  # pragma: no cover - defensive logging
        logger.error(
            "Error in bonus follow-up 'No' handler",
            error=str(e),
            exc_info=True,
            user_id=user_id,
        )
        if callback.message:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(DeclinedSurveyStates.waiting_priority_choice)
async def handle_strategy_priority_choice(
    message: Message,
    state: FSMContext,
    user: Optional[User] = None,
    **kwargs,
):
    """Process the user's strategic priority after declining the survey."""

    session = kwargs.get("session")
    user_service = UserService(session) if session else None
    target_user = user

    if target_user is None and user_service and message.from_user:
        target_user = await user_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
        )

    conversation_logger = ConversationLoggingService(session) if session else None
    user_id = getattr(target_user, "id", None)

    if conversation_logger and user_id:
        await conversation_logger.log_user_message(
            user_id=user_id,
            text=message.text or "",
        )

    logger.info(
        "strategy_priority_received",
        user_id=user_id,
        text=message.text or "",
    )

    intent = await analysis_service.classify_priority(message.text or "")
    logger.info(
        "strategy_priority_classified",
        user_id=user_id,
        intent=intent.value,
    )

    if intent is PriorityIntent.RELIABILITY:
        if conversation_logger and user_id:
            await conversation_logger.send_or_edit(
                message,
                text=RELIABILITY_MESSAGE,
                user_id=user_id,
                prefer_edit=False,
            )
        else:
            await message.answer(RELIABILITY_MESSAGE)

        await state.set_state(DeclinedSurveyStates.waiting_reliability_confirmation)
        logger.info(
            "strategy_reliability_prompt_sent",
            user_id=user_id,
        )
        return

    if intent is PriorityIntent.GROWTH:
        if conversation_logger and user_id:
            await conversation_logger.send_or_edit(
                message,
                text=GROWTH_MESSAGE,
                user_id=user_id,
                prefer_edit=False,
            )
        else:
            await message.answer(GROWTH_MESSAGE)

        await state.set_state(DeclinedSurveyStates.waiting_growth_confirmation)
        logger.info(
            "strategy_growth_prompt_sent",
            user_id=user_id,
        )
        return

    if conversation_logger and user_id:
        await conversation_logger.send_or_edit(
            message,
            text=CLARIFICATION_MESSAGE,
            user_id=user_id,
            prefer_edit=False,
        )
    else:
        await message.answer(CLARIFICATION_MESSAGE)

    logger.info(
        "strategy_priority_clarification_sent",
        user_id=user_id,
    )


@router.message(DeclinedSurveyStates.waiting_reliability_confirmation)
async def handle_reliability_confirmation(
    message: Message,
    state: FSMContext,
    user: Optional[User] = None,
    **kwargs,
):
    """Handle confirmation when user chooses reliability focus."""

    session = kwargs.get("session")
    user_service = UserService(session) if session else None
    target_user = user

    if target_user is None and user_service and message.from_user:
        target_user = await user_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
        )

    conversation_logger = ConversationLoggingService(session) if session else None
    user_id = getattr(target_user, "id", None)

    if conversation_logger and user_id:
        await conversation_logger.log_user_message(
            user_id=user_id,
            text=message.text or "",
        )

    logger.info(
        "reliability_confirmation_received",
        user_id=user_id,
        text=message.text or "",
    )

    intent = await analysis_service.classify_confirmation(message.text or "")
    logger.info(
        "reliability_confirmation_classified",
        user_id=user_id,
        intent=intent.value,
    )

    if intent is ConfirmationIntent.POSITIVE:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",
            callback_data=Callbacks.MANAGER_REQUEST,
        ))

        if conversation_logger and user_id:
            await conversation_logger.send_or_edit(
                message,
                text=APPLICATION_PROMPT_MESSAGE,
                user_id=user_id,
                reply_markup=builder.as_markup(),
                prefer_edit=False,
            )
        else:
            await message.answer(
                APPLICATION_PROMPT_MESSAGE,
                reply_markup=builder.as_markup(),
            )

        await state.clear()
        logger.info(
            "application_form_prompted",
            user_id=user_id,
            focus="reliability",
        )
        return

    if intent is ConfirmationIntent.NEGATIVE:
        if conversation_logger and user_id:
            await conversation_logger.send_or_edit(
                message,
                text=RELIABILITY_DECLINE_MESSAGE,
                user_id=user_id,
                prefer_edit=False,
            )
        else:
            await message.answer(RELIABILITY_DECLINE_MESSAGE)

        await state.clear()
        logger.info(
            "reliability_decline_acknowledged",
            user_id=user_id,
        )
        return

    if conversation_logger and user_id:
        await conversation_logger.send_or_edit(
            message,
            text=CONFIRMATION_CLARIFICATION_MESSAGE,
            user_id=user_id,
            prefer_edit=False,
        )
    else:
        await message.answer(CONFIRMATION_CLARIFICATION_MESSAGE)

    logger.info(
        "reliability_confirmation_clarification_sent",
        user_id=user_id,
    )


@router.message(DeclinedSurveyStates.waiting_growth_confirmation)
async def handle_growth_confirmation(
    message: Message,
    state: FSMContext,
    user: Optional[User] = None,
    **kwargs,
):
    """Handle confirmation when user chooses growth focus."""

    session = kwargs.get("session")
    user_service = UserService(session) if session else None
    target_user = user

    if target_user is None and user_service and message.from_user:
        target_user = await user_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
        )

    conversation_logger = ConversationLoggingService(session) if session else None
    user_id = getattr(target_user, "id", None)

    if conversation_logger and user_id:
        await conversation_logger.log_user_message(
            user_id=user_id,
            text=message.text or "",
        )

    logger.info(
        "growth_confirmation_received",
        user_id=user_id,
        text=message.text or "",
    )

    intent = await analysis_service.classify_confirmation(message.text or "")
    logger.info(
        "growth_confirmation_classified",
        user_id=user_id,
        intent=intent.value,
    )

    if intent is ConfirmationIntent.POSITIVE:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",
            callback_data=Callbacks.MANAGER_REQUEST,
        ))

        if conversation_logger and user_id:
            await conversation_logger.send_or_edit(
                message,
                text=APPLICATION_PROMPT_MESSAGE,
                user_id=user_id,
                reply_markup=builder.as_markup(),
                prefer_edit=False,
            )
        else:
            await message.answer(
                APPLICATION_PROMPT_MESSAGE,
                reply_markup=builder.as_markup(),
            )

        await state.clear()
        logger.info(
            "application_form_prompted",
            user_id=user_id,
            focus="growth",
        )
        return

    if intent is ConfirmationIntent.NEGATIVE:
        if conversation_logger and user_id:
            await conversation_logger.send_or_edit(
                message,
                text=GROWTH_DECLINE_MESSAGE,
                user_id=user_id,
                prefer_edit=False,
            )
        else:
            await message.answer(GROWTH_DECLINE_MESSAGE)

        await state.clear()
        logger.info(
            "growth_decline_acknowledged",
            user_id=user_id,
        )

        if target_user and user_service and session:
            await start_survey_via_message(
                message,
                session=session,
                user=target_user,
                user_service=user_service,
            )
        return

    if conversation_logger and user_id:
        await conversation_logger.send_or_edit(
            message,
            text=CONFIRMATION_CLARIFICATION_MESSAGE,
            user_id=user_id,
            prefer_edit=False,
        )
    else:
        await message.answer(CONFIRMATION_CLARIFICATION_MESSAGE)

    logger.info(
        "growth_confirmation_clarification_sent",
        user_id=user_id,
    )


def register_handlers(dp):
    """Register start flow handlers."""
    dp.include_router(router)
