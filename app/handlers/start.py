"""Start command and welcome flow handlers."""

import asyncio
from typing import Optional

import structlog
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, FSInputFile, InlineKeyboardButton,
                           Message)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.config import settings
from app.models import User
from app.services.bonus_service import BonusService
from app.services.llm_service import LLMService
from app.services.logging_service import ConversationLoggingService
from app.services.user_service import UserService
from app.utils.callbacks import Callbacks

router = Router()
logger = structlog.get_logger()


@router.message(Command("start"))
async def send_welcome(message: Message, **kwargs):
    """Handle /start command, register user, and offer a bonus."""
    try:
        session = kwargs.get("session")
        user_service = UserService(session)
        user = await user_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
        )

        conversation_logger = ConversationLoggingService(session)
        await conversation_logger.log_user_message(
            user_id=user.id,
            text=message.text or "/start",
            bot=message.bot,
            user=user,
            telegram_user=message.from_user,
            source_message=message,
        )

        welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —à–∫–æ–ª—ã –ê–∑–∞—Ç–∞ –í–∞–ª–µ–µ–≤–∞ üéâ
–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–æ–¥–∞—Ä–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –±–æ–Ω—É—Å üéÅ"""

        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data=Callbacks.BONUS_GET)
        )
        keyboard.add(
            InlineKeyboardButton(
                text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=Callbacks.APPLICATION_START
            )
        )

        await conversation_logger.send_or_edit(
            message,
            text=welcome_text,
            user_id=user.id,
            user=user,
            reply_markup=keyboard.as_markup(),
            prefer_edit=False,
        )

        logger.info("Start command processed, bonus offered", user_id=user.id)

    except Exception as e:
        logger.error("Error in start command", error=str(e), exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == Callbacks.BONUS_GET)
async def give_bonus(callback: CallbackQuery, **kwargs):
    """Send the bonus file and a follow-up message generated by LLM."""
    session = kwargs.get("session")
    user = kwargs.get("user")
    bot = kwargs.get("bot")
    conversation_logger = ConversationLoggingService(session)

    try:
        await callback.answer("üéÅ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à –±–æ–Ω—É—Å...")

        bonus_service = BonusService(session)
        await bonus_service.send_bonus(callback.message)
        logger.info("Bonus file sent", user_id=callback.from_user.id)

        # Wait a bit before sending the follow-up
        await asyncio.sleep(settings.bonus_followup_delay)

        llm_service = LLMService(session=session, user=user)
        prompt = (
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å. "
            "–¶–µ–ª—å - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö. "
            "–ü—Ä–∏–º–µ—Ä: '–†–∞–¥, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á–µ–º—É –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞—É—á–∏—Ç—å—Å—è –≤ –º–∏—Ä–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?' "
            "–∏–ª–∏ '–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞—à –±–æ–Ω—É—Å, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å?'"
        )
        
        messages = [{"role": "system", "content": prompt}]
        follow_up_text = await llm_service.get_completion(
            messages, purpose="onboarding_followup", expect_json=False
        )

        if follow_up_text:
            await conversation_logger.send_or_edit(
                callback.message,
                text=follow_up_text,
                user_id=user.id,
                user=user,
                prefer_edit=False,
            )
            logger.info("Sent LLM-generated bonus follow-up", user_id=user.id)
        else:
            logger.warning("LLM failed to generate bonus follow-up", user_id=user.id)

    except Exception as e:
        logger.error(
            "Error sending bonus file or follow-up", error=str(e), exc_info=True
        )
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )


def register_handlers(dp):
    """Register start flow handlers."""
    dp.include_router(router)
