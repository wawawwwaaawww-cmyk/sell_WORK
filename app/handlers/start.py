"""Start command and welcome flow handlers."""

import asyncio
import os
from typing import Optional

import structlog
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import (CallbackQuery, FSInputFile, InlineKeyboardButton,
                           Message)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.config import settings
from app.models import User
from app.services.logging_service import ConversationLoggingService
from app.services.user_service import UserService
from app.utils.callbacks import Callbacks

router = Router()
logger = structlog.get_logger()


@router.message(Command("start"))
async def start_command(message: Message, **kwargs):
    """Handle /start command and offer a bonus."""
    try:
        session = kwargs.get("session")
        user_service = UserService(session)
        user = await user_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
        )

        welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —à–∫–æ–ª—ã –ê–∑–∞—Ç–∞ –í–∞–ª–µ–µ–≤–∞ üéâ
–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–æ–¥–∞—Ä–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –±–æ–Ω—É—Å üéÅ"""

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å",
            callback_data="bonus:get_file"
        ))

        await message.answer(
            welcome_text,
            reply_markup=keyboard.as_markup()
        )

        logger.info("Start command processed, bonus offered", user_id=user.id)

    except Exception as e:
        logger.error("Error in start command", error=str(e), exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "bonus:get_file")
async def send_bonus_file(callback: CallbackQuery, **kwargs):
    """Send the bonus file and a follow-up message."""
    try:
        await callback.answer("üéÅ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à –±–æ–Ω—É—Å...")

        bonus_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'bonus', 'bonus.pdf'))
        document = FSInputFile(bonus_file_path)

        await callback.message.answer_document(
            document,
            caption="–ë–æ–Ω—É—Å —Ç–µ–∫—Å—Ç"
        )
        logger.info("Bonus file sent", user_id=callback.from_user.id)

        await asyncio.sleep(settings.bonus_followup_delay)

        user_name = callback.from_user.first_name or "–¥—Ä—É–≥"
        follow_up_text = (
            f"{user_name}, —Ö–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî "
            "–ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ. "
            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ –∏–ª–∏ –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–ª—è —Ä–æ—Å—Ç–∞. "
            "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?"
        )

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="ü§ë –î–ê",
            callback_data=Callbacks.SURVEY_START
        ))
        keyboard.add(InlineKeyboardButton(
            text="üòû –ù–µ—Ç",
            callback_data="bonus:followup_no"
        ))

        await callback.message.answer(
            follow_up_text,
            reply_markup=keyboard.as_markup()
        )
        logger.info("Bonus follow-up sent", user_id=callback.from_user.id)

    except Exception as e:
        logger.error("Error sending bonus file or follow-up", error=str(e), exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "bonus:followup_no")
async def handle_bonus_followup_no(callback: CallbackQuery):
    """Handle the 'No' response to the bonus follow-up."""
    try:
        await callback.answer()
        
        response_text = (
            "–ü–æ–Ω—è–ª —Ç–µ–±—è. –î–∞–∂–µ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ –≥–æ—Ç–æ–≤ –≤—ã–±–∏—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, "
            "–º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –æ–±—Å—É–¥–∏—Ç—å –æ–±—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç –≤—Ä–µ–º—è. "
            "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ: –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞?"
        )
        
        await callback.message.edit_text(response_text)
        logger.info("User declined survey, offered strategies", user_id=callback.from_user.id)

    except Exception as e:
        logger.error("Error in bonus follow-up 'No' handler", error=str(e), exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


def register_handlers(dp):
    """Register start flow handlers."""
    dp.include_router(router)
