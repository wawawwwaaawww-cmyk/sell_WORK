"""Material delivery handlers."""

import structlog
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.models import User, UserSegment
from app.services.materials_service import MaterialService
from app.services.event_service import EventService


router = Router()
logger = structlog.get_logger()


@router.callback_query(F.data == "materials:educational")
async def deliver_educational_materials(callback: CallbackQuery, user: User, **kwargs):
    """Deliver educational materials."""
    try:
        materials_service = MaterialService(kwargs.get("session"))
        materials = await materials_service.get_educational_materials(limit=5)
        
        # Format materials text
        materials_text = materials_service.format_materials_for_delivery(materials)
        
        # Add personalized intro
        intro_text = f"""üéì **{user.first_name or '–î—Ä—É–≥'}, –¥–µ—Ä–∂–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!**

–Ø –ø–æ–¥–æ–±—Ä–∞–ª–∞ –¥–ª—è —Ç–µ–±—è –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:

{materials_text}

üìö *–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞—á–∏–Ω–∞—è —Å –æ—Å–Ω–æ–≤.*

–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É? üöÄ"""
        
        # Create next steps keyboard
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üìû –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
            callback_data="consult:offer"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
            callback_data="llm:ask_questions"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            callback_data="manager:request"
        ))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            intro_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        # Log event
        event_service = EventService(kwargs.get("session"))
        await event_service.log_event(
            user_id=user.id,
            event_type="materials_delivered",
            payload={
                "type": "educational",
                "count": len(materials)
            }
        )
        
        await callback.answer("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        logger.error("Error delivering educational materials", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")


@router.callback_query(F.data.startswith("materials:segment:"))
async def deliver_segment_materials(callback: CallbackQuery, user: User, **kwargs):
    """Deliver materials for specific segment."""
    try:
        # Parse segment from callback data
        segment_name = callback.data.split(":")[-1]
        
        # Map segment name to enum
        segment_map = {
            "cold": UserSegment.COLD,
            "warm": UserSegment.WARM,
            "hot": UserSegment.HOT
        }
        
        segment = segment_map.get(segment_name, user.segment or UserSegment.COLD)
        
        materials_service = MaterialService(kwargs.get("session"))
        materials = await materials_service.get_materials_for_segment(
            segment=segment,
            funnel_stage=user.funnel_stage,
            limit=3
        )
        
        # Format materials text
        materials_text = materials_service.format_materials_for_delivery(materials)
        
        # Add segment-specific intro
        segment_intros = {
            UserSegment.COLD: "üå± **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö**",
            UserSegment.WARM: "üìà **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤**", 
            UserSegment.HOT: "üöÄ **–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö**"
        }
        
        intro = segment_intros.get(segment, "üìö **–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã**")
        
        full_text = f"""{intro}

{materials_text}

üí° *–≠—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–≤–æ–µ–º—É —É—Ä–æ–≤–Ω—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –ø–æ–º–æ–≥—É—Ç –¥–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.*

–ß—Ç–æ –¥–∞–ª—å—à–µ? ü§î"""
        
        # Create keyboard based on segment
        keyboard = InlineKeyboardBuilder()
        
        if segment == UserSegment.HOT:
            keyboard.add(InlineKeyboardButton(
                text="üí≥ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è",
                callback_data="offer:pay:advanced"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º",
                callback_data="consult:offer"
            ))
        else:
            keyboard.add(InlineKeyboardButton(
                text="üìû –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                callback_data="consult:offer"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üí¨ –û–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                callback_data="llm:discuss_programs"
            ))
        
        keyboard.add(InlineKeyboardButton(
            text="üìö –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            callback_data="materials:browse"
        ))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            full_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        # Log event
        event_service = EventService(kwargs.get("session"))
        await event_service.log_event(
            user_id=user.id,
            event_type="materials_delivered",
            payload={
                "type": "segment_specific",
                "segment": segment.value,
                "count": len(materials)
            }
        )
        
        await callback.answer(f"üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è {segment.value}!")
        
    except Exception as e:
        logger.error("Error delivering segment materials", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")


@router.callback_query(F.data == "materials:browse")
async def browse_materials(callback: CallbackQuery, user: User, **kwargs):
    """Show materials browser."""
    try:
        browse_text = """üìö **–ö–∞—Ç–∞–ª–æ–≥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤**

–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

üéì **–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã** - –æ—Å–Ω–æ–≤—ã –∏ —Ç–µ–æ—Ä–∏—è
üìà **–ö–µ–π—Å—ã —É—Å–ø–µ—Ö–∞** - —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤  
‚≠ê **–û—Ç–∑—ã–≤—ã** - –º–Ω–µ–Ω–∏—è –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –∫–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - –æ–±–∑–æ—Ä—ã —Ä—ã–Ω–∫–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã

–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? ü§î"""
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üéì –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            callback_data="materials:category:educational"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üìà –ö–µ–π—Å—ã —É—Å–ø–µ—Ö–∞",
            callback_data="materials:category:cases"
        ))
        keyboard.add(InlineKeyboardButton(
            text="‚≠ê –û—Ç–∑—ã–≤—ã —É—á–µ–Ω–∏–∫–æ–≤",
            callback_data="materials:category:reviews"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            callback_data="materials:category:security"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üìä –†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            callback_data="materials:category:analytics"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back:main_menu"
        ))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            browse_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error("Error showing materials browser", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("materials:category:"))
async def deliver_category_materials(callback: CallbackQuery, user: User, **kwargs):
    """Deliver materials by category."""
    try:
        category = callback.data.split(":")[-1]
        
        materials_service = MaterialService(kwargs.get("session"))
        
        # Get materials based on category
        if category == "educational":
            materials = await materials_service.get_educational_materials(limit=5)
            title = "üéì **–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã**"
        elif category == "cases":
            materials = await materials_service.get_case_studies(
                segment=user.segment or UserSegment.WARM,
                limit=4
            )
            title = "üìà **–ö–µ–π—Å—ã —É—Å–ø–µ—Ö–∞ –Ω–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤**"
        elif category == "reviews":
            materials = await materials_service.get_reviews_and_testimonials(limit=4)
            title = "‚≠ê **–û—Ç–∑—ã–≤—ã –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö**"
        elif category == "security":
            materials = await materials_service.get_materials_by_context(
                context="safety_concerns",
                segment=user.segment or UserSegment.COLD,
                limit=4
            )
            title = "üõ°Ô∏è **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**"
        elif category == "analytics":
            materials = await materials_service.get_materials_by_context(
                context="market_analysis",
                segment=user.segment or UserSegment.WARM,
                limit=4
            )
            title = "üìä **–†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**"
        else:
            materials = []
            title = "üìö **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã**"
        
        # Format materials
        if materials:
            materials_text = materials_service.format_materials_for_delivery(materials)
            full_text = f"{title}\n\n{materials_text}"
        else:
            full_text = f"{title}\n\nüìù –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è. –ê –ø–æ–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º!"
        
        # Create keyboard
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üìû –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
            callback_data="consult:offer"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üìö –î—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            callback_data="materials:browse"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            callback_data="manager:request"
        ))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            full_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        # Log event
        event_service = EventService(kwargs.get("session"))
        await event_service.log_event(
            user_id=user.id,
            event_type="materials_delivered",
            payload={
                "type": "category",
                "category": category,
                "count": len(materials)
            }
        )
        
        await callback.answer(f"üìö {title}")
        
    except Exception as e:
        logger.error("Error delivering category materials", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")


def register_handlers(dp):
    """Register material handlers."""
    dp.include_router(router)