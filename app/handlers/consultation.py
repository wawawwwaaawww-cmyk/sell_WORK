"""Consultation scheduling handlers."""

from datetime import date, time, datetime
from typing import Dict, Any

import structlog
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.models import User, FunnelStage
from app.services.user_service import UserService
from app.services.consultation_service import ConsultationService
from app.services.event_service import EventService
from app.utils.callbacks import Callbacks
from app.handlers.scene_dispatcher import try_process_callback


class ConsultationStates(StatesGroup):
    waiting_custom_date = State()
    waiting_custom_time = State()


router = Router()
logger = structlog.get_logger()


@router.callback_query(F.data == "consult:offer")
async def offer_consultation(callback: CallbackQuery, user: User, **kwargs):
    """Offer consultation to user."""
    try:
        session = kwargs.get("session")
        if await try_process_callback(callback, session=session, user=user):
            return
        consultation_service = ConsultationService(session)
        
        # Check if user already has upcoming appointment
        upcoming = await consultation_service.repository.get_upcoming_appointments(user.id)
        if upcoming:
            appointment = upcoming[0]
            details = consultation_service.format_appointment_details(appointment)
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                callback_data="consult:reschedule"
            ))
            keyboard.add(InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                callback_data="consult:cancel"
            ))
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                f"‚úÖ **–£ —Ç–µ–±—è —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è!**\n\n{details}",
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
            return
        
        # Get next 2 available dates
        available_dates = consultation_service.get_next_available_dates(days_ahead=5)
        
        offer_text = f"""üìû **–û—Ç–ª–∏—á–Ω–æ, {user.first_name or '–¥—Ä—É–≥'}! –ó–∞–ø–∏—à–µ–º —Ç–µ–±—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é**

üë®‚Äçüíº **–ß—Ç–æ –¥–∞—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:**
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π
‚úÖ –ü–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è  
‚úÖ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π

‚è± **–§–æ—Ä–º–∞—Ç:** 15 –º–∏–Ω—É—Ç –≤ Telegram
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** –ë–µ—Å–ø–ª–∞—Ç–Ω–æ

üìÖ **–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:**"""
        
        keyboard = InlineKeyboardBuilder()
        
        # Add first 2 dates
        for i, date_option in enumerate(available_dates[:2]):
            formatted_date = date_option.strftime("%d.%m (%a)")
            keyboard.add(InlineKeyboardButton(
                text=f"üìÖ {formatted_date}",
                callback_data=f"consult:date:{date_option.isoformat()}"
            ))
        
        keyboard.add(InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–∞—Ç—ã",
            callback_data="consult:custom_date"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back:main_menu"
        ))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            offer_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        # Log event
        event_service = EventService(kwargs.get("session"))
        await event_service.log_event(
            user_id=user.id,
            event_type="consultation_offered",
            payload={}
        )
        
        await callback.answer("üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è!")
        
    except Exception as e:
        logger.error("Error offering consultation", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("consult:date:"))
async def select_consultation_date(callback: CallbackQuery, user: User, **kwargs):
    """Handle consultation date selection."""
    try:
        session = kwargs.get("session")
        date_str = callback.data.split(":")[-1]
        selected_date = date.fromisoformat(date_str)
        
        consultation_service = ConsultationService(session)
        
        # Get available slots for selected date
        available_slots = await consultation_service.get_available_slots_for_date(selected_date)
        
        if not available_slots:
            await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
            return
        
        formatted_date = selected_date.strftime("%d.%m.%Y (%A)")
        
        time_text = f"""üìÖ **–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {formatted_date}**

‚è∞ **–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:**

{consultation_service.get_time_slots_text()}

–ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.

–í—Å–µ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–æ—Å–∫–≤–µ üá∑üá∫"""
        
        keyboard = InlineKeyboardBuilder()
        
        for slot in available_slots:
            formatted_time = consultation_service.format_slot_time(slot)
            keyboard.add(InlineKeyboardButton(
                text=f"‚è∞ {formatted_time}",
                callback_data=f"consult:time:{date_str}:{slot.isoformat()}"
            ))

        keyboard.add(InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
            callback_data=f"consult:custom_time:{date_str}"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
            callback_data="consult:offer"
        ))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            time_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error("Error selecting consultation date", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã")


@router.callback_query(F.data.startswith("consult:time:"))
async def select_consultation_time(callback: CallbackQuery, user: User, user_service: UserService, **kwargs):
    """Handle consultation time selection."""
    try:
        parts = callback.data.split(":")
        date_str = parts[2]
        time_str = parts[3]
        
        session = kwargs.get("session")
        selected_date = date.fromisoformat(date_str)
        selected_time = time.fromisoformat(time_str)
        
        consultation_service = ConsultationService(session)
        
        # Book consultation
        success, appointment, message = await consultation_service.book_consultation(
            user_id=user.id,
            consultation_date=selected_date,
            slot=selected_time
        )
        
        if success and appointment:
            # Update user funnel stage
            await user_service.advance_funnel_stage(user, FunnelStage.CONSULTATION)
            
            # Format confirmation message
            details = consultation_service.format_appointment_details(appointment)
            
            confirmation_text = f"""‚úÖ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!**

{details}

üéâ **–ß—Ç–æ –¥–∞–ª—å—à–µ:**
üì± –ó–∞ 15 –º–∏–Ω—É—Ç –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–∏—à–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üí¨ –≠–∫—Å–ø–µ—Ä—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π —Ç–æ—á–Ω–æ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è  
üìù –ü–æ–¥–≥–æ—Ç–æ–≤—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑—ã

üí° *–ï—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω—è—Ç—Å—è ‚Äî –º–æ–∂–µ—à—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É –∑–∞—Ä–∞–Ω–µ–µ*

–£–≤–∏–¥–∏–º—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏! üëã"""
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                callback_data="consult:reschedule"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–æ –≤—Å—Ç—Ä–µ—á–∏",
                callback_data="llm:pre_consult_questions"
            ))
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                confirmation_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
            # Log successful booking
            event_service = EventService(kwargs.get("session"))
            await event_service.log_consultation_booked(
                user_id=user.id,
                date=date_str,
                time=time_str
            )
            
            await callback.answer("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!")
            
        else:
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏**\n\n{message}\n\n–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                parse_mode="Markdown"
            )
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏")
            
    except Exception as e:
        logger.error("Error selecting consultation time", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏")


@router.callback_query(F.data.startswith("consult:custom_time:"))
async def request_custom_time(callback: CallbackQuery, user: User, state: FSMContext, **kwargs):
    """Request custom time input from the user."""
    try:
        parts = callback.data.split(":")
        if len(parts) < 3:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–∞")
            return

        date_str = parts[2]
        await state.set_state(ConsultationStates.waiting_custom_time)
        await state.update_data(custom_date=date_str)

        custom_time_text = """‚è∞ **–ù–∞–ø–∏—à–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏**

–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:00)

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫–Ω–∞: 12:00, 14:00, 16:00, 18:00 –ú–°–ö
‚Ä¢ –ï—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ
‚Ä¢ –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª

–í–≤–µ–¥–∏ –≤—Ä–µ–º—è:"""

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ª–æ—Ç–∞–º",
            callback_data=f"consult:date:{date_str}"
        ))

        await callback.message.edit_text(
            custom_time_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

        logger.info(
            "Custom time requested",
            user_id=user.id,
            selected_date=date_str
        )

        await callback.answer()

    except Exception as e:
        logger.error("Error requesting custom time", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(ConsultationStates.waiting_custom_time)
async def handle_custom_time(
    message: Message,
    user: User,
    state: FSMContext,
    user_service: UserService,
    **kwargs
):
    """Handle custom time input for a consultation."""
    try:
        session = kwargs.get("session")
        data = await state.get_data()
        date_str = data.get("custom_date")

        if not date_str:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç –µ—â—ë —Ä–∞–∑.")
            await state.clear()
            return

        text_value = message.text.strip()
        if text_value.lower() == "–æ—Ç–º–µ–Ω–∞":
            await state.clear()

            consultation_service = ConsultationService(session)
            selected_date = date.fromisoformat(date_str)
            available_slots = await consultation_service.get_available_slots_for_date(selected_date)

            if not available_slots:
                await message.answer(
                    "‚ùå –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏."
                )
                return

            formatted_date = selected_date.strftime("%d.%m.%Y (%A)")
            time_text = f"""üìÖ **–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {formatted_date}**

‚è∞ **–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:**

{consultation_service.get_time_slots_text()}

–ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.

–í—Å–µ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–æ—Å–∫–≤–µ üá∑üá∫"""

            keyboard = InlineKeyboardBuilder()
            for slot in available_slots:
                formatted_time = consultation_service.format_slot_time(slot)
                keyboard.add(InlineKeyboardButton(
                    text=f"‚è∞ {formatted_time}",
                    callback_data=f"consult:time:{selected_date.isoformat()}:{slot.isoformat()}"
                ))

            keyboard.add(InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
                callback_data=f"consult:custom_time:{selected_date.isoformat()}"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
                callback_data="consult:offer"
            ))
            keyboard.adjust(1)

            await message.answer(
                time_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )

            return

        try:
            selected_time = datetime.strptime(text_value, "%H:%M").time()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:00).")
            return

        consultation_service = ConsultationService(session)

        if selected_time not in consultation_service.available_slots:
            await message.answer(
                "‚ùå –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å–ª–æ—Ç—ã 12:00, 14:00, 16:00 –∏ 18:00 –ú–°–ö. –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
            )
            return

        selected_date = date.fromisoformat(date_str)

        success, appointment, result_message = await consultation_service.book_consultation(
            user_id=user.id,
            consultation_date=selected_date,
            slot=selected_time
        )

        if success and appointment:
            await state.clear()

            await user_service.advance_funnel_stage(user, FunnelStage.CONSULTATION)

            details = consultation_service.format_appointment_details(appointment)

            confirmation_text = f"""‚úÖ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!**

{details}

üéâ **–ß—Ç–æ –¥–∞–ª—å—à–µ:**
üì± –ó–∞ 15 –º–∏–Ω—É—Ç –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–∏—à–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üí¨ –≠–∫—Å–ø–µ—Ä—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π —Ç–æ—á–Ω–æ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
üìù –ü–æ–¥–≥–æ—Ç–æ–≤—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑—ã

üí° *–ï—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω—è—Ç—Å—è ‚Äî –º–æ–∂–µ—à—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É –∑–∞—Ä–∞–Ω–µ–µ*

–£–≤–∏–¥–∏–º—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏! üëã"""

            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                callback_data="consult:reschedule"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–æ –≤—Å—Ç—Ä–µ—á–∏",
                callback_data="llm:pre_consult_questions"
            ))
            keyboard.adjust(1)

            await message.answer(
                confirmation_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )

            event_service = EventService(kwargs.get("session"))
            await event_service.log_consultation_booked(
                user_id=user.id,
                date=selected_date.isoformat(),
                time=selected_time.isoformat()
            )

            logger.info(
                "Consultation booked via custom time",
                user_id=user.id,
                date=selected_date.isoformat(),
                time=selected_time.isoformat()
            )

        else:
            await message.answer(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏**\n\n{result_message}\n\n–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                parse_mode="Markdown"
            )

    except Exception as e:
        logger.error("Error handling custom time", error=str(e), user_id=user.id, exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏")

@router.callback_query(F.data == "consult:custom_date")
async def request_custom_date(callback: CallbackQuery, state: FSMContext, **kwargs):
    """Request custom date input."""
    try:
        await state.set_state(ConsultationStates.waiting_custom_date)
        
        custom_date_text = """üìù **–í–≤–µ–¥–∏ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏**

–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)

‚ö†Ô∏è **–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ:**
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: 12:00, 14:00, 16:00, 18:00 –ú–°–ö
‚Ä¢ –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª ‚Äî –æ—Ç–ø—Ä–∞–≤—å ¬´–û—Ç–º–µ–Ω–∞¬ª

–í–≤–µ–¥–∏ –¥–∞—Ç—É:"""
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç",
            callback_data="consult:offer"
        ))
        
        await callback.message.edit_text(
            custom_date_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error("Error requesting custom date", error=str(e), exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(ConsultationStates.waiting_custom_date)
async def handle_custom_date(message: Message, user: User, state: FSMContext, **kwargs):
    """Handle custom date input."""
    try:
        session = kwargs.get("session")
        date_text = message.text.strip()
        
        # Parse date
        try:
            selected_date = datetime.strptime(date_text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)"
            )
            return
        
        # Validate date
        if selected_date <= date.today():
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è. –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–≤—Ç—Ä–∞."
            )
            return
        
        if selected_date.weekday() >= 5:
            await message.answer(
                "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)."
            )
            return
        
        # Clear state after receiving valid date
        await state.clear()

        # Show time slots for selected date
        consultation_service = ConsultationService(session)
        available_slots = await consultation_service.get_available_slots_for_date(selected_date)

        if not available_slots:
            await message.answer(
                f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É."
            )
            return

        formatted_date = selected_date.strftime("%d.%m.%Y (%A)")

        time_text = f"""üìÖ **–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {formatted_date}**

‚è∞ **–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:**

{consultation_service.get_time_slots_text()}

–ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.

–í—Å–µ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–æ—Å–∫–≤–µ üá∑üá∫"""

        keyboard = InlineKeyboardBuilder()

        for slot in available_slots:
            formatted_time = consultation_service.format_slot_time(slot)
            keyboard.add(InlineKeyboardButton(
                text=f"‚è∞ {formatted_time}",
                callback_data=f"consult:time:{selected_date.isoformat()}:{slot.isoformat()}"
            ))

        keyboard.add(InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
            callback_data=f"consult:custom_time:{selected_date.isoformat()}"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
            callback_data="consult:offer"
        ))
        keyboard.adjust(1)

        await message.answer(
            time_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error("Error handling custom date", error=str(e), user_id=user.id, exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã")


@router.callback_query(F.data == "consult:reschedule")
async def reschedule_consultation(callback: CallbackQuery, user: User, **kwargs):
    """Handle consultation rescheduling."""
    try:
        session = kwargs.get("session")
        consultation_service = ConsultationService(session)
        
        # Get user's upcoming appointment
        upcoming = await consultation_service.repository.get_upcoming_appointments(user.id)
        if not upcoming:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π")
            return
        
        appointment = upcoming[0]
        current_details = consultation_service.format_appointment_details(appointment)
        
        # Get available dates for rescheduling
        available_dates = consultation_service.get_next_available_dates(days_ahead=7)
        
        reschedule_text = f"""üìÖ **–ü–µ—Ä–µ–Ω–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏**

**–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:**
{current_details}

üìÖ **–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É:**"""
        
        keyboard = InlineKeyboardBuilder()
        
        # Add date options
        for date_option in available_dates[:3]:
            formatted_date = date_option.strftime("%d.%m (%a)")
            keyboard.add(InlineKeyboardButton(
                text=f"üìÖ {formatted_date}",
                callback_data=f"reschedule:date:{date_option.isoformat()}:{appointment.id}"
            ))
        
        keyboard.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
            callback_data="consult:cancel"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back:main_menu"
        ))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            reschedule_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error("Error rescheduling consultation", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "consult:cancel")
async def cancel_consultation(callback: CallbackQuery, user: User, **kwargs):
    """Handle consultation cancellation."""
    try:
        session = kwargs.get("session")
        consultation_service = ConsultationService(session)
        
        # Get user's upcoming appointment
        upcoming = await consultation_service.repository.get_upcoming_appointments(user.id)
        if not upcoming:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π")
            return
        
        appointment = upcoming[0]
        
        # Cancel appointment
        success = await consultation_service.cancel_appointment(appointment)
        
        if success:
            cancel_text = f"""‚ùå **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞**

–¢–≤–æ—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞ {appointment.date.strftime('%d.%m.%Y')} –≤ {appointment.slot.strftime('%H:%M')} –ú–°–ö –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.

üí≠ **–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞!**

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É üë§"""
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üìû –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                callback_data="consult:offer"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                callback_data="manager:request"
            ))
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                cancel_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
            await callback.answer("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
        else:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
            
    except Exception as e:
        logger.error("Error canceling consultation", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def register_handlers(dp):
    """Register consultation handlers."""
    dp.include_router(router)