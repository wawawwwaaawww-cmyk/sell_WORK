"""Simple admin handler for testing."""

import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup

from ..db import get_db
from ..repositories.admin_repository import AdminRepository
from ..models import AdminRole

logger = logging.getLogger(__name__)
router = Router()


class AdminStates(StatesGroup):
    """Admin FSM states for simple admin."""
    # Product states
    waiting_for_product_name = State()
    waiting_for_product_price = State()
    waiting_for_product_description = State()


async def admin_required(func):
    """Decorator to check if user is admin."""
    async def wrapper(message_or_query, *args, **kwargs):
        user_id = message_or_query.from_user.id
        
        async for session in get_db():
            admin_repo = AdminRepository(session)
            is_admin = await admin_repo.is_admin(user_id)
            break
            
        if not is_admin:
            if isinstance(message_or_query, Message):
                await message_or_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            else:
                await message_or_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        
        return await func(message_or_query, *args, **kwargs)
    return wrapper


def role_required(required_role: AdminRole):
    """Decorator to check if admin has required role."""
    def decorator(func):
        async def wrapper(message_or_query, *args, **kwargs):
            user_id = message_or_query.from_user.id
            
            async for session in get_db():
                admin_repo = AdminRepository(session)
                has_permission = await admin_repo.has_permission(user_id, required_role)
                break
                
            if not has_permission:
                if isinstance(message_or_query, Message):
                    await message_or_query.answer(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: {required_role.value}")
                else:
                    await message_or_query.answer(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: {required_role.value}", show_alert=True)
                return
            
            return await func(message_or_query, *args, **kwargs)
        return wrapper
    return decorator


@router.message(Command("admin"))
async def simple_admin_panel(message: Message):
    """Simple admin panel."""
    user_id = message.from_user.id
    
    # Check if user is admin
    async for session in get_db():
        admin_repo = AdminRepository(session)
        is_admin = await admin_repo.is_admin(user_id)
        
        if not is_admin:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # Get capabilities
        capabilities = await admin_repo.get_admin_capabilities(user_id)
        role = capabilities.get("role", "unknown")
        break
        
    # Create simple keyboard
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –¢–µ—Å—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="test_analytics")],
        [InlineKeyboardButton(text="üìù –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="test_message")]
    ])
    
    await message.answer(
        f"üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)</b>\n\n"
        f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: <b>{role}</b>\n\n"
        f"üîç User ID: {user_id}\n"
        f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "test_analytics")
async def test_analytics(callback: CallbackQuery):
    """Test analytics."""
    await callback.message.edit_text(
        "üìä <b>–¢–µ—Å—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"
        "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
        "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
        "‚úÖ –ê–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "test_message")
async def test_message(callback: CallbackQuery):
    """Test message."""
    await callback.answer("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞!", show_alert=True)


def register_simple_admin_handlers(dp):
    """Register simple admin handlers."""
    dp.include_router(router)