"""Lead management handlers."""

from typing import Optional, Tuple

import structlog
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.models import Lead, User
from app.services.lead_service import LeadService
from app.services.manager_notification_service import ManagerNotificationService
from app.services.event_service import EventService
from app.repositories.admin_repository import AdminRepository
from app.repositories.user_repository import UserRepository
from app.services.sales_script_service import SalesScriptService
from app.models import AdminRole
from app.services.script_service import ScriptService
from app.utils.callbacks import Callbacks


router = Router()
logger = structlog.get_logger()


def _parse_lead_id(data: str) -> Optional[int]:
    try:
        return int(data.split(":")[-1])
    except (ValueError, IndexError):
        return None


async def _load_lead_context(session, lead_id: int) -> Tuple[Optional[Lead], Optional[User]]:
    lead = await session.get(Lead, lead_id)
    if not lead:
        return None, None
    user_repo = UserRepository(session)
    user = await user_repo.get_by_id(lead.user_id)
    return lead, user


@router.callback_query(F.data.startswith("manager:request"))
async def handle_manager_request(callback: CallbackQuery, user: User, **kwargs):
    """Handle manager contact request."""
    try:
        # Log event
        event_service = EventService(kwargs.get("session"))
        await event_service.log_event(
            user_id=user.id,
            event_type="manager_requested",
            payload={}
        )
        
        # Check if should create lead
        lead_service = LeadService(kwargs.get("session"))
        context = {"manager_requested": True}
        
        if await lead_service.should_create_lead(user, context):
            # Create lead
            lead = await lead_service.create_lead_from_user(
                user=user,
                trigger_event="manager_requested",
                conversation_summary="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
            )
            
            # Notify managers
            manager_service = ManagerNotificationService(callback.bot, kwargs.get("session"))
            await manager_service.notify_new_lead(lead, user)
            await manager_service.notify_manager_request(user)
            
            response_text = """üë§ **–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É!**

‚úÖ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
‚è∞ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
üì± –û–∂–∏–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ

üí° *–ü–æ–∫–∞ –æ–∂–∏–¥–∞–µ—à—å, –º–æ–∂–µ—à—å –∏–∑—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç—É*

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º! üöÄ"""
            
        else:
            # Just notify without creating lead
            manager_service = ManagerNotificationService(callback.bot, kwargs.get("session"))
            await manager_service.notify_manager_request(user)
            
            response_text = """üë§ **–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**

üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
‚è∞ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
üì± –°–ª–µ–¥–∏ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ –±–æ—Ç—É! üí¨"""
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            callback_data="materials:educational"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É",
            callback_data="llm:ask_questions"
        ))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            response_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer("üìû –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É!")
        
    except Exception as e:
        logger.error("Error handling manager request", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@router.callback_query(F.data.startswith(f"{Callbacks.LEAD_SCRIPT_SHOW}:"))
async def handle_lead_script_show(callback: CallbackQuery, **kwargs):
    """Handle script reveal button from lead card."""
    session = kwargs.get("session")
    lead_id = _parse_lead_id(callback.data)
    if not lead_id:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ª–∏–¥–∞", show_alert=True)
        return

    lead, user = await _load_lead_context(session, lead_id)
    if not lead or not user:
        await callback.answer("–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if callback.message is None:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return

    script_service = SalesScriptService(session, callback.bot)
    bot = callback.bot
    try:
        result = await script_service.ensure_script(
            lead,
            user,
            reason="button_show",
            actor_id=callback.from_user.id,
        )
        sent = await script_service.post_script_to_thread(
            lead,
            result,
            chat_id=callback.message.chat.id,
            reply_to_message_id=callback.message.message_id,
            manager_id=callback.from_user.id,
            auto_update=False,
        )
        if sent is None:
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç (–≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            )
            await callback.answer("–°–∫—Ä–∏–ø—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        else:
            await callback.answer("–°–∫—Ä–∏–ø—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —Ç—Ä–µ–¥–µ")
    except Exception as exc:  # pragma: no cover
        logger.error(
            "lead_script_show_failed",
            lead_id=lead_id,
            error=str(exc),
            exc_info=True,
        )
        await callback.answer("–°–∫—Ä–∏–ø—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text="‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ.",
        )


@router.callback_query(F.data.startswith(f"{Callbacks.LEAD_SCRIPT_REFRESH}:"))
async def handle_lead_script_refresh(callback: CallbackQuery, **kwargs):
    """Force regeneration of the sales script."""
    session = kwargs.get("session")
    lead_id = _parse_lead_id(callback.data)
    if not lead_id:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ª–∏–¥–∞", show_alert=True)
        return

    lead, user = await _load_lead_context(session, lead_id)
    if not lead or not user:
        await callback.answer("–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    if callback.message is None:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return

    script_service = SalesScriptService(session, callback.bot)
    bot = callback.bot
    try:
        result = await script_service.ensure_script(
            lead,
            user,
            force=True,
            reason="manual_refresh",
            actor_id=callback.from_user.id,
        )
        sent = await script_service.post_script_to_thread(
            lead,
            result,
            chat_id=callback.message.chat.id,
            reply_to_message_id=callback.message.message_id,
            manager_id=callback.from_user.id,
            auto_update=False,
        )
        if sent is None:
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç (—Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ). –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–Ω–æ–≤–æ.",
            )
            await callback.answer("–°–∫—Ä–∏–ø—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        else:
            await callback.answer("–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")
    except Exception as exc:  # pragma: no cover
        logger.error(
            "lead_script_refresh_failed",
            lead_id=lead_id,
            error=str(exc),
            exc_info=True,
        )
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç", show_alert=True)


@router.callback_query(F.data.startswith(f"{Callbacks.LEAD_SCRIPT_COPY}:"))
async def handle_lead_script_copy(callback: CallbackQuery, **kwargs):
    """Send script copy to manager's direct messages."""
    session = kwargs.get("session")
    lead_id = _parse_lead_id(callback.data)
    if not lead_id:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ª–∏–¥–∞", show_alert=True)
        return

    lead, user = await _load_lead_context(session, lead_id)
    if not lead or not user:
        await callback.answer("–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    script_service = SalesScriptService(session, callback.bot)
    try:
        result = await script_service.ensure_script(
            lead,
            user,
            reason="manual_copy",
            actor_id=callback.from_user.id,
        )
        await script_service.send_script_to_manager(
            lead,
            user,
            result,
            manager_telegram_id=callback.from_user.id,
        )
        await callback.answer("–°–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as exc:  # pragma: no cover
        logger.error(
            "lead_script_copy_failed",
            lead_id=lead_id,
            error=str(exc),
            exc_info=True,
        )
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç", show_alert=True)


@router.callback_query(F.data.startswith(f"{Callbacks.CONSULT_RESCHEDULE}:"))
async def handle_lead_reschedule_request(callback: CallbackQuery, **kwargs):
    """Provide quick hint for rescheduling from manager channel."""
    await callback.answer(
        "–î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –æ—Ç–º–µ—Ç—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CRM.",
        show_alert=True,
    )


@router.callback_query(F.data.startswith("lead:take:"))
async def handle_lead_take(callback: CallbackQuery, **kwargs):
    """Handle lead taking by manager."""
    try:
        lead_id = int(callback.data.split(":")[-1])
        manager_id = callback.from_user.id
        session = kwargs.get("session")

        admin_repo = AdminRepository(session)
        if not await admin_repo.can_take_leads(manager_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –±—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏", show_alert=True)
            return

        lead_service = LeadService(session)
        success, message = await lead_service.assign_lead(lead_id, manager_id)

        if success:
            lead = await lead_service.repository.get_lead_by_id(lead_id)
            user = None
            if lead:
                user_repo = UserRepository(session)
                user = await user_repo.get_by_id(lead.user_id)

            manager_service = ManagerNotificationService(callback.bot, session)
            event_service = EventService(session)

            if lead and user:
                await manager_service.notify_lead_taken(lead, user, manager_id)
                await event_service.log_event(
                    user_id=user.id,
                    event_type="lead_assigned",
                    payload={"lead_id": lead.id, "manager_id": manager_id},
                )

            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text='‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å',
                callback_data=f'lead:return:{lead_id}',
            ))
            if lead:
                keyboard.add(InlineKeyboardButton(
                    text='üëÅ –ü—Ä–æ—Ñ–∏–ª—å',
                    callback_data=f'lead:profile:{lead.user_id}',
                ))
            keyboard.adjust(1)

            manager_name = callback.from_user.full_name or callback.from_user.first_name or '–ú–µ–Ω–µ–¥–∂–µ—Ä'
            
            original_text = callback.message.text
            new_text = f"{original_text}\n\n---\n‚úÖ **–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É**\n–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name}"

            await callback.message.edit_text(
                new_text,
                parse_mode='Markdown',
                reply_markup=None,  # Remove buttons after taking
            )

            await callback.answer('‚úÖ –õ–∏–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—Å!')
        else:
            await callback.answer(f'‚ùå {message}', show_alert=True)

    except ValueError:
        await callback.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ª–∏–¥–∞', show_alert=True)
    except Exception as e:
        logger.error('Error taking lead', error=str(e), exc_info=True)
        await callback.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', show_alert=True)


@router.callback_query(F.data.startswith("lead:return:"))
async def handle_lead_return(callback: CallbackQuery, **kwargs):
    """Return lead back to the manager queue."""
    try:
        lead_id = int(callback.data.split(":")[-1])
        manager_id = callback.from_user.id
        session = kwargs.get("session")

        admin_repo = AdminRepository(session)
        if not await admin_repo.can_take_leads(manager_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            return

        lead_service = LeadService(session)
        success, message = await lead_service.return_lead_to_queue(lead_id, manager_id)

        if not success:
            await callback.answer(f'‚ùå {message}', show_alert=True)
            return

        from app.repositories.user_repository import UserRepository
        user_repo = UserRepository(session)
        lead = await lead_service.repository.get_lead_by_id(lead_id)
        user = await user_repo.get_by_id(lead.user_id) if lead else None

        manager_service = ManagerNotificationService(callback.bot, session)
        if lead and user:
            await manager_service.notify_new_lead(lead, user)

        await callback.message.edit_text(
            f'‚ôªÔ∏è –õ–∏–¥ #{lead_id} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
            parse_mode='Markdown'
        )

        if lead and user:
            event_service = EventService(session)
            await event_service.log_event(
                user_id=user.id,
                event_type='lead_returned',
                payload={"lead_id": lead.id, "manager_id": manager_id},
            )

        await callback.answer('–õ–∏–¥ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å')

    except ValueError:
        await callback.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ª–∏–¥–∞', show_alert=True)
    except Exception as e:
        logger.error('Error returning lead', error=str(e), exc_info=True)
        await callback.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', show_alert=True)


@router.callback_query(F.data.startswith("lead:profile:"))
async def handle_lead_profile(callback: CallbackQuery, **kwargs):
    """Show lead profile details."""
    try:
        user_id = int(callback.data.split(":")[-1])
        
        # Get user data
        from app.repositories.user_repository import UserRepository
        user_repo = UserRepository(kwargs.get("session"))
        user = await user_repo.get_by_id(user_id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Get user's engagement data
        event_service = EventService(kwargs.get("session"))
        engagement_score = await event_service.get_engagement_score(user_id, hours=24)
        
        total_scored = user.scored_total or 0
        if user.lead_level_percent is None or total_scored < 10:
            lead_level_display = f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({total_scored}/10)"
        else:
            lead_level_display = f"{user.lead_level_percent}%"

        counter_value = user.counter or 0
        pos_count = user.pos_count or 0
        neu_count = user.neu_count or 0
        neg_count = user.neg_count or 0

        sentiment_updated = (
            user.lead_level_updated_at.strftime('%d.%m.%Y %H:%M')
            if user.lead_level_updated_at
            else "‚Äî"
        )

        profile_text = f"""üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user_id}**

üìã **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ **–ò–º—è:** {user.first_name or ''} {user.last_name or ''}
‚Ä¢ **Username:** @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ **–¢–µ–ª–µ—Ñ–æ–Ω:** {user.phone if user.phone else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ **Email:** {user.email if user.email else '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üìä **–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è:**
‚Ä¢ **–°–µ–≥–º–µ–Ω—Ç:** {user.segment or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
‚Ä¢ **–ë–∞–ª–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:** {user.lead_score}/15
‚Ä¢ **–≠—Ç–∞–ø –≤–æ—Ä–æ–Ω–∫–∏:** {user.funnel_stage}

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ **–ë–∞–ª–ª –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏:** {engagement_score}
‚Ä¢ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:** {'–î–∞' if user.is_blocked else '–ù–µ—Ç'}
‚Ä¢ **–ò—Å—Ç–æ—á–Ω–∏–∫:** {user.source or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üìä **–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π:**
‚Ä¢ **–£—Ä–æ–≤–µ–Ω—å –ª–∏–¥–∞:** {lead_level_display}
‚Ä¢ **–ë–∞–ª–∞–Ω—Å:** {counter_value:+d} (–ø–æ–∑–∏—Ç–∏–≤ {pos_count} / –Ω–µ–π—Ç—Ä {neu_count} / –Ω–µ–≥–∞—Ç–∏–≤ {neg_count})
‚Ä¢ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {sentiment_updated}

üìÖ **–î–∞—Ç—ã:**
‚Ä¢ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user.created_at.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {user.updated_at.strftime('%d.%m.%Y %H:%M')}"""
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üí¨ –ü–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥",
            callback_data=f"manager:takeover:{user_id}"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üéØ –°–æ–∑–¥–∞—Ç—å –ª–∏–¥",
            callback_data=f"lead:create:{user_id}"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üì± –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π",
            callback_data=f"user:events:{user_id}"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üîô –ó–∞–∫—Ä—ã—Ç—å",
            callback_data="close_message"
        ))
        keyboard.adjust(2, 1, 1)
        
        await callback.message.reply(
            profile_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error("Error showing lead profile", error=str(e), exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("lead:create:"))
async def handle_manual_lead_creation(callback: CallbackQuery, **kwargs):
    """Handle manual lead creation by manager."""
    try:
        user_id = int(callback.data.split(":")[-1])
        
        # Get user
        from app.repositories.user_repository import UserRepository
        user_repo = UserRepository(kwargs.get("session"))
        user = await user_repo.get_by_id(user_id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Create lead
        lead_service = LeadService(kwargs.get("session"))
        lead = await lead_service.create_lead_from_user(
            user=user,
            trigger_event="manual_creation",
            conversation_summary=f"–õ–∏–¥ —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.first_name or 'Unknown'}"
        )
        
        # Notify in channel
        manager_service = ManagerNotificationService(callback.bot, kwargs.get("session"))
        await manager_service.notify_new_lead(lead, user)
        
        await callback.answer(f"‚úÖ –õ–∏–¥ #{lead.id} —Å–æ–∑–¥–∞–Ω!")
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error("Error creating manual lead", error=str(e), exc_info=True)

@router.callback_query(F.data.startswith("lead:script:"))
async def handle_lead_script_send(callback: CallbackQuery, user: User, **kwargs):
    """Send sales script to the manager's private messages."""
    session = kwargs.get("session")
    lead_id = _parse_lead_id(callback.data)
    if not lead_id:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ª–∏–¥–∞", show_alert=True)
        return

    admin_repo = AdminRepository(session)
    admin = await admin_repo.get_by_telegram_id(callback.from_user.id)
    if not admin or admin.role not in [AdminRole.MANAGER, AdminRole.ADMIN, AdminRole.OWNER]:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    lead, lead_user = await _load_lead_context(session, lead_id)
    if not lead or not lead_user:
        await callback.answer("–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not lead.summary:
        await callback.answer("–î–ª—è —ç—Ç–æ–≥–æ –ª–∏–¥–∞ –Ω–µ—Ç —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.", show_alert=True)
        return

    script_service = ScriptService(session)
    try:
        scripts = await script_service.search_similar_scripts(lead.summary, top_k=1)
        if not scripts:
            await callback.bot.send_message(
                callback.from_user.id,
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ª–∏–¥–∞ #{lead.id}."
            )
            await callback.answer("–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        script = scripts[0]
        script_text = f"**–°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–∏–¥–∞ #{lead.id}**\n\n**–í–æ–ø—Ä–æ—Å/—Å–∏—Ç—É–∞—Ü–∏—è:**\n{script['message']}\n\n**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ—Ç–≤–µ—Ç:**\n{script['answer']}"

        await callback.bot.send_message(
            callback.from_user.id,
            script_text,
            parse_mode="Markdown"
        )
        await callback.answer("–°–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    except Exception as e:
        logger.error("Error sending lead script", error=str(e), lead_id=lead_id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞.", show_alert=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "close_message")
async def handle_close_message(callback: CallbackQuery, **kwargs):
    """Close/delete message."""
    try:
        await callback.message.delete()
        await callback.answer()
    except Exception as e:
        logger.error("Error closing message", error=str(e), exc_info=True)
        await callback.answer()


def register_handlers(dp):
    """Register lead management handlers."""
    dp.include_router(router)
