"""Payment processing handlers."""

from decimal import Decimal
from typing import Dict, Any

import structlog
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.models import User, FunnelStage
from app.services.user_service import UserService
from app.services.payment_service import PaymentService
from app.services.event_service import EventService
from app.services.manager_notification_service import ManagerNotificationService
from app.services.lead_service import LeadService


router = Router()
logger = structlog.get_logger()


@router.callback_query(F.data.startswith("offer:pay:"))
async def handle_payment_offer(callback: CallbackQuery, user: User, user_service: UserService, **kwargs):
    """Handle payment offer request."""
    try:
        product_code = callback.data.split(":")[-1]
        
        payment_service = PaymentService(kwargs.get("session"))
        
        # Get product by code or use default
        if product_code == "advanced":
            # For hot segment users
            products = await payment_service.get_suitable_products(user)
            if not products:
                await callback.answer("–ü—Ä–æ–¥—É–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
            product = products[0]  # Get first suitable product
        else:
            # Get all suitable products and let user choose
            products = await payment_service.get_suitable_products(user)
            if not products:
                await callback.answer("–ü—Ä–æ–¥—É–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
            product = products[0]
        
        # Check payment eligibility
        eligible, message = await payment_service.check_payment_eligibility(user, product, payment_type="full")
        if not eligible:
            await callback.message.edit_text(
                f"‚ùå **–û–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n{message}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                parse_mode="Markdown"
            )
            await callback.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # Check for discounts/bonuses filter
        filter_text = f"""üí≥ **–ì–æ—Ç–æ–≤ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É \"{product.name}\"?**

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {product.price:,.0f} —Ä—É–±–ª–µ–π

‚ùì **–í–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:**

–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –±–æ–Ω—É—Å–Ω—ã–µ —Ä—É–±–ª–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–∫—É–ø–æ–∫?

‚Ä¢ **–ï—Å–ª–∏ –¥–∞** ‚Äî —Ç–µ–±—è –ø–æ–¥–∫–ª—é—á–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ —Å–∫–∏–¥–∫–æ–π
‚Ä¢ **–ï—Å–ª–∏ –Ω–µ—Ç** ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç–µ

–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"""
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üé´ –î–∞, –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥/–±–æ–Ω—É—Å—ã",
            callback_data=f"payment:discount:{product.id}"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üí≥ –ù–µ—Ç, –æ–ø–ª–∞—á–∏–≤–∞—é –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å",
            callback_data=f"payment:full:{product.id}"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            callback_data="llm:discuss_programs"
        ))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            filter_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error("Error handling payment offer", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@router.callback_query(F.data.startswith("payment:discount:"))
async def handle_discount_payment(callback: CallbackQuery, user: User, **kwargs):
    """Handle payment with discount/bonus."""
    try:
        product_id = int(callback.data.split(":")[-1])
        
        # Create lead for manager handling
        lead_service = LeadService(kwargs.get("session"))
        context = {"payment_initiated": True, "discount_requested": True}
        
        if await lead_service.should_create_lead(user, context):
            lead = await lead_service.create_lead_from_user(
                user=user,
                trigger_event="payment_with_discount",
                conversation_summary=f"–ó–∞–ø—Ä–æ—Å–∏–ª –æ–ø–ª–∞—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ —Å–∫–∏–¥–∫–æ–π/–±–æ–Ω—É—Å–∞–º–∏. Product ID: {product_id}"
            )
            
            # Notify managers
            manager_service = ManagerNotificationService(callback.bot, kwargs.get("session"))
            await manager_service.notify_new_lead(lead, user)
        
        payment_service = PaymentService(kwargs.get("session"))
        await payment_service.create_payment_link(
            user_id=user.id,
            product_id=product_id,
            payment_type="manual",
            manual_link=True,
            conditions_note="–ó–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ —Å–∫–∏–¥–∫–µ/—Ä–∞—Å—Å—Ä–æ—á–∫–µ",
            discount_type="manual",
        )

        discount_text = f"""üé´ **–û—Ç–ª–∏—á–Ω–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ—é –∑–∞—è–≤–∫—É**

‚úÖ –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ —Å–∫–∏–¥–∫–æ–π –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É
‚è∞ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
üí¨ –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏

üì± –ñ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!

üí° *–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏*

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–π —à–∫–æ–ª—ã! üöÄ"""
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üìö –ò–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–∫–∞ –∂–¥—É",
            callback_data="materials:educational"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É",
            callback_data="llm:ask_questions"
        ))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            discount_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        # Log event
        event_service = EventService(kwargs.get("session"))
        await event_service.log_event(
            user_id=user.id,
            event_type="payment_discount_requested",
            payload={"product_id": product_id}
        )
        
        await callback.answer("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è!")
        
    except Exception as e:
        logger.error("Error handling discount payment", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("payment:full:"))
async def handle_full_payment(callback: CallbackQuery, user: User, user_service: UserService, **kwargs):
    """Handle full payment without discounts."""
    try:
        product_id = int(callback.data.split(":")[-1])
        
        payment_service = PaymentService(kwargs.get("session"))
        
        # Get product
        product = await payment_service.product_repo.get_by_id(product_id)
        if not product:
            await callback.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Show payment options
        payment_options_text = f"""üí≥ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã \"{product.name}\"**

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {product.price:,.0f} —Ä—É–±–ª–µ–π

üí° **–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:**

üî∏ **–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞** ‚Äî –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ —Å–∫–∏–¥–∫–æ–π
üî∏ **–†–∞—Å—Å—Ä–æ—á–∫–∞** ‚Äî —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –Ω–∞ —É–¥–æ–±–Ω—ã–µ —á–∞—Å—Ç–∏

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"""
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üí≥ –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞",
            callback_data=f"payment:process:full:{product_id}"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üìÖ –†–∞—Å—Å—Ä–æ—á–∫–∞",
            callback_data=f"payment:process:installment:{product_id}"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"offer:pay:{product.code}"
        ))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            payment_options_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error("Error handling full payment", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("payment:process:"))
async def process_payment(callback: CallbackQuery, user: User, user_service: UserService, **kwargs):
    """Process payment and generate payment link."""
    try:
        parts = callback.data.split(":")
        payment_type = parts[2]  # full or installment
        product_id = int(parts[3])
        
        payment_service = PaymentService(kwargs.get("session"))
        
        # Get product
        product = await payment_service.product_repo.get_by_id(product_id)
        if not product:
            await callback.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Create payment link
        custom_amount = None
        if payment_type == "installment":
            # For installment, could be first payment amount
            custom_amount = product.price / 3  # Example: 3 installments
        
        success, payment_link, message = await payment_service.create_payment_link(
            user_id=user.id,
            product_id=product_id,
            payment_type=payment_type,
            custom_amount=custom_amount,
        )
        
        if success and payment_link:
            await user_service.advance_funnel_stage(user, FunnelStage.PAYMENT)
            
            offer_text = payment_service.get_payment_offer_text(
                user,
                product,
                payment_link,
                payment_type=payment_type,
                custom_amount=custom_amount,
            )
            
            if payment_type == "installment" and custom_amount is not None:
                offer_text += f"\n\nüìÖ **–†–∞—Å—Å—Ä–æ—á–∫–∞:** –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ {custom_amount:,.0f} —Ä—É–±., –¥–∞–ª–µ–µ –ø–æ {custom_amount:,.0f} —Ä—É–±. –µ–∂–µ–º–µ—Å—è—á–Ω–æ"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                url=payment_link
            ))
            keyboard.add(InlineKeyboardButton(
                text="‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ",
                callback_data="manager:request"
            ))
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                offer_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
            # Create lead for payment tracking
            lead_service = LeadService(kwargs.get("session"))
            context = {"payment_initiated": True}
            
            if await lead_service.should_create_lead(user, context):
                lead = await lead_service.create_lead_from_user(
                    user=user,
                    trigger_event="payment_initiated",
                    conversation_summary=f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ–ø–ª–∞—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã {product.name}. –¢–∏–ø: {payment_type}"
                )
                
                # Notify managers
                manager_service = ManagerNotificationService(callback.bot, kwargs.get("session"))
                await manager_service.notify_payment_initiated(user, product.name, float(custom_amount or product.price))
            
            # Log event
            event_service = EventService(kwargs.get("session"))
            await event_service.log_payment_initiated(
                user_id=user.id,
                product_id=product_id,
                amount=float(custom_amount or product.price)
            )
            
            await callback.answer("üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≥–æ—Ç–æ–≤–∞!")
            
        elif success:
            await callback.message.edit_text(
                f"‚ÑπÔ∏è {message}\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.",
                parse_mode="Markdown"
            )
            await callback.answer("–ü–µ—Ä–µ–¥–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä—É")
        else:
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É**\n\n{message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                parse_mode="Markdown"
            )
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏")
            
    except Exception as e:
        logger.error("Error processing payment", error=str(e), user_id=user.id, exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")


def register_handlers(dp):
    """Register payment handlers."""
    dp.include_router(router)
