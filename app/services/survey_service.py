"""Survey repository for managing survey data."""

from typing import List, Optional, Dict, Any

import structlog
from sqlalchemy import select, and_, delete
from sqlalchemy.ext.asyncio import AsyncSession

from app.models import SurveyAnswer


class SurveyRepository:
    """Repository for survey database operations."""
    
    def __init__(self, session: AsyncSession):
        self.session = session
        self.logger = structlog.get_logger()
    
    async def save_answer(
        self,
        user_id: int,
        question_code: str,
        answer_code: str,
        points: int
    ) -> SurveyAnswer:
        """Save survey answer."""
        answer = SurveyAnswer(
            user_id=user_id,
            question_code=question_code,
            answer_code=answer_code,
            points=points
        )
        
        self.session.add(answer)
        await self.session.flush()
        await self.session.refresh(answer)
        
        self.logger.info(
            "Survey answer saved",
            user_id=user_id,
            question=question_code,
            answer=answer_code,
            points=points
        )
        
        return answer
    
    async def get_user_answers(self, user_id: int) -> List[SurveyAnswer]:
        """Get all survey answers for a user."""
        stmt = select(SurveyAnswer).where(
            SurveyAnswer.user_id == user_id
        ).order_by(SurveyAnswer.created_at)
        
        result = await self.session.execute(stmt)
        return result.scalars().all()
    
    async def get_answer_by_question(
        self,
        user_id: int,
        question_code: str
    ) -> Optional[SurveyAnswer]:
        """Get specific answer by question code."""
        stmt = select(SurveyAnswer).where(
            and_(
                SurveyAnswer.user_id == user_id,
                SurveyAnswer.question_code == question_code
            )
        )
        
        result = await self.session.execute(stmt)
        return result.scalar_one_or_none()
    
    async def calculate_total_score(self, user_id: int) -> int:
        """Calculate total survey score for user."""
        answers = await self.get_user_answers(user_id)
        return sum(answer.points for answer in answers)
    
    async def delete_user_answers(self, user_id: int):
        """Delete all survey answers for a user."""
        stmt = delete(SurveyAnswer).where(SurveyAnswer.user_id == user_id)
        await self.session.execute(stmt)
        self.logger.info("Deleted previous survey answers", user_id=user_id)
    
    async def is_survey_complete(self, user_id: int) -> bool:
        """Check if user has completed all 5 questions."""
        answers = await self.get_user_answers(user_id)
        question_codes = {answer.question_code for answer in answers}
        required_questions = {"q1", "q2", "q3", "q4", "q5"}
        return required_questions.issubset(question_codes)


class SurveyService:
    """Service for survey business logic."""
    
    def __init__(self, session: AsyncSession):
        self.session = session
        self.repository = SurveyRepository(session)
        self.logger = structlog.get_logger()
        
        # Define survey questions and scoring
        self.questions = {
            "q1": {
                "text": "*–ö–∞–∫–æ–π –æ–ø—ã—Ç –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –≤—ã –∏–º–µ–µ—Ç–µ?*\n\n–í–æ–ø—Ä–æ—Å 1/5",
                "options": {
                    "trading": {"text": "–¢—Ä–µ–π–¥–∏–Ω–≥", "points": 2},
                    "crypto_long": {"text": "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", "points": 1},
                    "stocks": {"text": "–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫", "points": 1},
                    "deposit": {"text": "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –≤–∫–ª–∞–¥", "points": 0},
                    "no_experience": {"text": "–ù–µ—Ç –æ–ø—ã—Ç–∞ –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö", "points": 0},
                },
            },
            "q2": {
                "text": "*–ê —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –∫–∞–∫–∞—è —É —Ç–µ–±—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥?*\n\n–í–æ–ø—Ä–æ—Å 2/5",
                "options": {
                    "passive_income": {"text": "–í—ã–π—Ç–∏ –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "points": 3},
                    "safety_net": {"text": "–ù–∞–∫–æ–ø–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "points": 2},
                    "debt": {"text": "–ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥–∏ –∏ –∫—Ä–µ–¥–∏—Ç—ã", "points": 2},
                    "start_investing": {"text": "–ù–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "points": 1},
                    "no_goal": {"text": "–ù–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏", "points": 0},
                },
            },
            "q3": {
                "text": "*–ö–∞–∫ —Å—Ä–æ—á–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å —Å–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å?*\n\n–í–æ–ø—Ä–æ—Å 3/5",
                "options": {
                    "one_month": {"text": "–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞", "points": 3},
                    "three_months": {"text": "–í —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –º–µ—Å—è—Ü–µ–≤", "points": 2},
                    "half_year": {"text": "–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ–ª—É–≥–æ–¥–∞", "points": 1},
                    "year": {"text": "–í —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞", "points": 1},
                    "researching": {"text": "–ü—Ä–æ—Å—Ç–æ –∏–∑—É—á–∞—é —Ç–µ–º—É, –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤", "points": 0},
                },
            },
            "q4": {
                "text": "–° –∫–∞–∫–æ–π —Å—É–º–º—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?\n\n–í–æ–ø—Ä–æ—Å 4/5",
                "options": {
                    "under_10": {"text": "–î–æ 10$", "points": 0},
                    "10_100": {"text": "–û—Ç 10$ –¥–æ 100$", "points": 1},
                    "100_500": {"text": "–û—Ç 100$ –¥–æ 500$", "points": 2},
                    "500_1000": {"text": "–û—Ç 500$ –¥–æ 1000$", "points": 2},
                    "over_1000": {"text": "–û—Ç 1000$", "points": 3},
                },
            },
            "q5": {
                "text": "*–ê –∫–∞–∫ –¥—É–º–∞–µ—à—å, –µ—Å–ª–∏ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ, —á—Ç–æ –æ–±—É—á–µ–Ω–∏–µ —É—Å–∫–æ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –≥–æ—Ç–æ–≤ –ª–∏ —Ç—ã –≤ –Ω–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?*\n\n–í–æ–ø—Ä–æ—Å 5/5",
                "options": {
                    "yes": {"text": "–î–∞", "points": 2},
                    "no": {"text": "–ù–µ—Ç", "points": 0},
                },
            },
        }

        # Response confirmations
        self.confirmations = {
            "q1": {
                "trading": (
                    "–ö—Ä—É—Ç–æ üî• –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ–ø—ã—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ. –ó–Ω–∞—á–∏—Ç, –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –¥–∏–Ω–∞–º–∏–∫–æ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ—à–µ–Ω–∏–π ‚Äî —Ç—Ä–µ–π–¥–∏–Ω–≥ –Ω–∞ —Å–ø–æ—Ç–µ –∏–ª–∏ —Ñ—å—é—á–µ—Ä—Å—ã."
                ),
                "crypto_long": (
                    "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä üôå –î–æ–ª–≥–æ—Å—Ä–æ–∫ ‚Äî —ç—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–µ –∫–æ–ª–µ–±–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞, –∞ –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∞—Ç—å —Å–∏–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã. –¢—É—Ç —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–µ–π–∫–∏–Ω–≥."
                ),
                "stocks": (
                    "–ó–¥–æ—Ä–æ–≤–æ üëå –ó–Ω–∞—á–∏—Ç, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ–ø—ã—Ç —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏. –í –∫—Ä–∏–ø—Ç–µ —Ç–æ–∂–µ –µ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏ —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ ‚Äî –∫—Ä–∏–ø—Ç–æ-ETF –∏–ª–∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏."
                ),
                "deposit": (
                    "–ü–æ–Ω—è–ª üôÇ –¢—ã –≤—ã–±–∏—Ä–∞–ª –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å. –í –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ —Ç–æ–∂–µ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Äî —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ —Å—Ç–µ–π–∫–∏–Ω–≥ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é."
                ),
                "no_experience": (
                    "–û—Ç–ª–∏—á–Ω–æ, –∑–Ω–∞—á–∏—Ç, –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –±–∞–∑—ã üí° –í –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤: –Ω–µ–±–æ–ª—å—à–∏–µ –ø–æ–∫—É–ø–∫–∏ –∏ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã."
                ),
            },
            "q2": {
                "passive_income": (
                    "–û—Ç–ª–∏—á–Ω–∞—è —Ü–µ–ª—å üí° –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ –º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ —Å—Ç–µ–π–∫–∏–Ω–≥ –∏–ª–∏ DeFi-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã."
                ),
                "safety_net": (
                    "–ó–¥–æ—Ä–æ–≤–æ üëç –ü–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –Ω–∞–¥—ë–∂–Ω–∞—è –±–∞–∑–∞. –í –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –ø—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è."
                ),
                "debt": (
                    "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è üôå –í —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤–∞–∂–Ω–æ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–¥—ë–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã."
                ),
                "start_investing": (
                    "–û—Ç–ª–∏—á–Ω–æ üëå –ù–∞—á–∞–ª–æ –≤—Å–µ–≥–¥–∞ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ. –ú–æ–∂–Ω–æ –∑–∞–π—Ç–∏ —Å –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å."
                ),
                "no_goal": (
                    "–•–æ—Ä–æ—à–æ üôÇ –ò–Ω–æ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç—å —Ä—ã–Ω–æ–∫, –∞ —Ü–µ–ª—å —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ö–æ–¥—É."
                ),
            },
            "q3": {
                "one_month": (
                    "–ü–æ–Ω—è–ª üî• –ó–Ω–∞—á–∏—Ç, –Ω—É–∂–µ–Ω –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –í –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ —ç—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Äî —Ç—Ä–µ–π–¥–∏–Ω–≥ –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ DeFi."
                ),
                "three_months": (
                    "–û—Ç–ª–∏—á–Ω–æ üëç –ó–∞ 3 –º–µ—Å—è—Ü–∞ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: —á–∞—Å—Ç—å –≤ —Å—Ç–µ–π–∫–∏–Ω–≥, —á–∞—Å—Ç—å –≤ —Ç–æ–ø–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã, –ø–ª—é—Å –ø—Ä–æ—Å—Ç—ã–µ DeFi-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã."
                ),
                "half_year": (
                    "–•–æ—Ä–æ—à–æ üôå –ü–æ–ª–≥–æ–¥–∞ ‚Äî —Ö–æ—Ä–æ—à–∏–π —Å—Ä–æ–∫ –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞—Ö –∏ –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã."
                ),
                "year": (
                    "–ü–æ–Ω—è–ª üôÇ –ì–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ BTC, ETH –∏ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤ —Å–æ —Å—Ç–µ–π–∫–∏–Ω–≥–æ–º."
                ),
                "researching": (
                    "–û—Ç–ª–∏—á–Ω–æ üëå –ó–Ω–∞—á–∏—Ç, –ø–æ–∫–∞ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–±–Ω—ã–µ —à–∞–≥–∏. –¢—É—Ç –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å—É–º–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
                ),
            },
            "q4": {
                "under_10": (
                    "–ö—Ä—É—Ç–æ, –¥–∞–∂–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å—É–º–º—ã –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–æ–±–æ–≤–∞—Ç—å üí° –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Å–≤–æ–∏—Ç—å—Å—è —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏, –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ –ø–µ—Ä–≤—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏ –±–µ–∑ —Ä–∏—Å–∫–∞."
                ),
                "10_100": (
                    "–•–æ—Ä–æ—à–æ üôå –° —Ç–∞–∫–æ–π —Å—É–º–º—ã —É–¥–æ–±–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: DCA –Ω–∞ BTC/ETH –∏–ª–∏ –Ω–µ–±–æ–ª—å—à–æ–π —Å—Ç–µ–π–∫–∏–Ω–≥ –Ω–∞ –±–∏—Ä–∂–µ. –≠—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏."
                ),
                "100_500": (
                    "–û—Ç–ª–∏—á–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ üëç –£–∂–µ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –º–∏–Ω–∏-–ø–æ—Ä—Ç—Ñ–µ–ª—å: —á–∞—Å—Ç—å –≤ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞—Ö, —á–∞—Å—Ç—å –≤ —Ç–æ–ø–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç–∞—Ö, –ø–ª—é—Å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å DeFi."
                ),
                "500_1000": (
                    "–°—É–ø–µ—Ä üöÄ –¢–∞–∫–æ–π –±—é–¥–∂–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: —Å—Ç–µ–π–±–ª—ã, BTC/ETH, —Ç–æ–ø–æ–≤—ã–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã –∏ –¥–∞–∂–µ –¥–æ—Ö–æ–¥–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã."
                ),
                "over_1000": (
                    "–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç üî• –ù–∞ —Ç–∞–∫–æ–π —Å—É–º–º–µ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —É–∂–µ —Å–µ—Ä—å—ë–∑–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å: BTC, ETH, –∞–ª—å—Ç–∫–æ–∏–Ω—ã, —Å—Ç–µ–π–∫–∏–Ω–≥, –∞ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–∞–∂–µ NFT –∏–ª–∏ GameFi."
                ),
            },
            "q5": {
                "yes": (
                    "–°—É–ø–µ—Ä! üôå –≠—Ç–æ —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –∏ —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.\n"
                    "–Ø –º–æ–≥—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å —Ç–µ–±—è —Å –Ω–∞—à–∏–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º ‚Äî –æ–Ω —Ä–∞–∑–±–µ—Ä—ë—Ç —Ç–≤–æ–∏ —Ü–µ–ª–∏ –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è. "
                    "–≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ 15‚Äì20 –º–∏–Ω—É—Ç, –∏ –ø–æ—Å–ª–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —É —Ç–µ–±—è —É–∂–µ –±—É–¥–µ—Ç —á—ë—Ç–∫–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π.\n"
                    "üìå –•–æ—á–µ—à—å, —è –∑–∞–ø–∏—à—É —Ç–µ–±—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è?\n"
                    "üëâ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ (–µ—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—à—å –ø—Ä–æ–¥–∞–∂—É –≤ —á–∞—Ç–µ): –¢–æ–≥–¥–∞ –º–æ–≥—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç "
                    "–∏–º–µ–Ω–Ω–æ –ø–æ–¥ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã. –û–Ω–∞ –¥–∞—Å—Ç {program_result}.\n"
                    "–•–æ—á–µ—à—å, —è —Å–∫–∏–Ω—É –¥–µ—Ç–∞–ª–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—á–∞—Å—Ç–∏—è?"
                ),
                "no": (
                    "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è üëç –ú–Ω–æ–≥–∏–µ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É—é—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –ù–æ —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏ –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫, —É –Ω–∞—Å –µ—Å—Ç—å "
                    "–∫—É—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n"
                    "–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ—Å—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –≥–¥–µ –æ–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π –ø—É—Ç—å –≤ –∫—Ä–∏–ø—Ç–µ. –ë–µ–∑ "
                    "–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.\n"
                    "üìå –•–æ—á–µ—à—å, —è –∑–∞–ø–∏—à—É —Ç–µ–±—è?\n"
                    "üëâ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ (–≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ): –•–æ—Ä–æ—à–æ üôÇ –¢–æ–≥–¥–∞ —è –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É ‚Äî –æ–Ω–∞ –∫–∞–∫ —Ä–∞–∑ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ "
                    "–¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞. –ú–∏–Ω–∏–º—É–º —Ç–µ–æ—Ä–∏–∏, –º–∞–∫—Å–∏–º—É–º –ø—Ä–∞–∫—Ç–∏–∫–∏. –•–æ—á–µ—à—å, —Å–∫–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏–µ?"
                ),
            },
        }
    
    async def clear_user_answers(self, user_id: int):
        """Clear all previous survey answers for a user."""
        await self.repository.delete_user_answers(user_id)

    async def get_question(self, question_code: str) -> Optional[Dict[str, Any]]:
        """Get question data by code."""
        return self.questions.get(question_code)
    
    async def save_answer(
        self,
        user_id: int,
        question_code: str,
        answer_code: str
    ) -> SurveyAnswer:
        """Save survey answer with points calculation."""
        question = self.questions.get(question_code)
        if not question:
            raise ValueError(f"Invalid question code: {question_code}")
        
        option = question["options"].get(answer_code)
        if not option:
            raise ValueError(f"Invalid answer code: {answer_code}")
        
        return await self.repository.save_answer(
            user_id=user_id,
            question_code=question_code,
            answer_code=answer_code,
            points=option["points"]
        )
    
    async def get_confirmation_text(
        self,
        question_code: str,
        answer_code: str
    ) -> str:
        """Get confirmation text for answer."""
        confirmations = self.confirmations.get(question_code, {})
        return confirmations.get(answer_code, "–û—Ç–ª–∏—á–Ω–æ!")
    
    async def get_next_question_code(self, user_id: int) -> Optional[str]:
        """Get next unanswered question code."""
        answers = await self.repository.get_user_answers(user_id)
        answered_questions = {answer.question_code for answer in answers}

        for q_code in ["q1", "q2", "q3", "q4", "q5"]:
            if q_code not in answered_questions:
                return q_code

        return None  # All questions answered

    def determine_program_recommendation(
        self,
        answers_map: Dict[str, str],
        total_score: int
    ) -> Dict[str, str]:
        """Determine recommended program based on survey answers."""
        program_catalog = {
            "community": {
                "code": "community",
                "name": "–ö—Ä–∏–ø—Ç–æ—Å–æ–æ–±—â–µ—Å—Ç–≤–æ",
                "key_result": "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤–∞—Ö",
                "description": (
                    "üíº <b>–ö—Ä–∏–ø—Ç–æ—Å–æ–æ–±—â–µ—Å—Ç–≤–æ</b> ‚Äî –∑–∞–∫—Ä—ã—Ç–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ —Ä–∞–∑–±–æ—Ä–∞–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π, "
                    "—Å–∏–≥–Ω–∞–ª–∞–º–∏ –ø–æ —Å—Ç–µ–π–∫–∏–Ω–≥—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—É—Ä–∞—Ç–æ—Ä–æ–≤.\n\n"
                    "üìå –ü–æ–¥—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–∏—Å—Ç–µ–º–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å –∫–∞–ø–∏—Ç–∞–ª –±–µ–∑ —Å—É–µ—Ç—ã: –ø–æ–ª—É—á–∏—à—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è, "
                    "—Ä–∞–∑–±–æ—Ä —Ä–∏—Å–∫–æ–≤ –∏ –≥–æ—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–∞—Å—Å–∏–≤–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º."
                ),
            },
            "profit": {
                "code": "profit",
                "name": "–î–æ—Ö–æ–¥ –∑–∞ —á–∞—Å",
                "key_result": "–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—Ç–∞—Ä—Ç –≤ –∫—Ä–∏–ø—Ç–µ —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏",
                "description": (
                    "üöÄ <b>–î–æ—Ö–æ–¥ –∑–∞ —á–∞—Å</b> ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞. –ó–∞ 60 –º–∏–Ω—É—Ç —Å–æ–±–∏—Ä–∞–µ—à—å –ª–∏—á–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π: "
                    "–∫–∞–∫–∏–µ –±–∏—Ä–∂–∏ –æ—Ç–∫—Ä—ã—Ç—å, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –∫–∞–∫ –Ω–µ —Å–ª–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç.\n\n"
                    "üìå –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤: –º–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏, —à–∞–±–ª–æ–Ω—ã –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –∑–∞–ø—É—Å–∫–µ."
                ),
            },
            "fast_money": {
                "code": "fast_money",
                "name": "–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–Ω—å–≥–∏",
                "key_result": "—É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                "description": (
                    "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–Ω—å–≥–∏</b> ‚Äî –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫—É—Ä—Å –ø–æ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º: —Ä–∞–∑–±–æ—Ä DeFi-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, "
                    "–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –±—ã—Å—Ç—Ä–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n"
                    "üìå –î–ª—è —Ç–µ—Ö, –∫–æ–º—É –≤–∞–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—è—Ü—ã –∏ –∫—Ç–æ –≥–æ—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ —á—ë—Ç–∫–∏–º —á–µ–∫-–ª–∏—Å—Ç–∞–º."
                ),
            },
            "vip": {
                "code": "vip",
                "name": "Big Money VIP",
                "key_result": "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –≤—ã—à–µ —Ä—ã–Ω–∫–∞",
                "description": (
                    "üíé <b>Big Money VIP</b> ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É: –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, "
                    "—Ä–∞–∑–±–æ—Ä —Å–¥–µ–ª–æ–∫ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–æ–≤.\n\n"
                    "üìå –î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∫–∞–ø–∏—Ç–∞–ª–æ–º: –ø–æ–ª—É—á–∏—à—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–¥–µ–ª–∫–∞—Ö."
                ),
            },
        }

        experience = answers_map.get("q1")
        goal = answers_map.get("q2")
        urgency = answers_map.get("q3")
        budget = answers_map.get("q4")

        if experience == "trading" or total_score >= 11:
            recommendation = program_catalog["vip"]
        elif urgency in {"one_month", "three_months"} and budget in {"100_500", "500_1000", "over_1000"}:
            recommendation = program_catalog["fast_money"]
        elif goal in {"passive_income", "safety_net"}:
            recommendation = program_catalog["community"]
        elif experience in {"no_experience", "deposit"} or budget in {"under_10", "10_100"}:
            recommendation = program_catalog["profit"]
        else:
            recommendation = program_catalog["community"]

        self.logger.info(
            "Program recommendation prepared",
            answers=answers_map,
            total_score=total_score,
            program=recommendation["code"],
        )

        return recommendation

    async def generate_summary(self, user_id: int) -> Dict[str, Any]:
        """Generate user survey summary."""
        answers = await self.repository.get_user_answers(user_id)
        total_score = sum(answer.points for answer in answers)

        answers_map = {answer.question_code: answer.answer_code for answer in answers}

        # Determine segment
        if total_score <= 4:
            segment = "cold"
            segment_desc = "–ù–æ–≤–∏—á–æ–∫ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"
        elif total_score <= 9:
            segment = "warm"
            segment_desc = "–ò–º–µ–µ—Ç –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è"
        else:
            segment = "hot"
            segment_desc = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä"

        # Build profile text
        profile_parts = []
        for answer in answers:
            question = self.questions.get(answer.question_code)
            if question:
                option = question["options"].get(answer.answer_code)
                if option:
                    profile_parts.append(option["text"])

        program_recommendation = self.determine_program_recommendation(answers_map, total_score)

        return {
            "total_score": total_score,
            "segment": segment,
            "segment_description": segment_desc,
            "profile_summary": " | ".join(profile_parts),
            "answers_count": len(answers),
            "answers": answers_map,
            "program": program_recommendation,
        }
    
    async def get_survey_summary(self, user_id: int) -> Optional[str]:
        """Get formatted survey summary for LLM context."""
        try:
            if not await self.repository.is_survey_complete(user_id):
                return None
            
            summary = await self.generate_summary(user_id)
            return f"""–ê–Ω–∫–µ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: {summary['segment_description']} ({summary['total_score']}/13 –±–∞–ª–ª–æ–≤)
–ü—Ä–æ—Ñ–∏–ª—å: {summary['profile_summary']}"""

        except Exception as e:
            self.logger.error("Error getting survey summary", error=str(e))
            return None