"""Helpers for rendering analytics reports for dashboards and UIs."""

from __future__ import annotations

from typing import Any, Dict, List, Optional, Tuple

SEGMENT_LABELS = {
    "cold": "‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–µ",
    "warm": "üî• –¢—ë–ø–ª—ã–µ",
    "hot": "üå∂Ô∏è –ì–æ—Ä—è—á–∏–µ",
    "unknown": "‚ùî –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
}

LEAD_STATUS_LABELS = {
    "new": "üÜï –ù–æ–≤—ã–µ",
    "taken": "üîÑ –í —Ä–∞–±–æ—Ç–µ",
    "done": "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ",
    "cancelled": "‚õî –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ",
    "unknown": "‚ùî –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
}

DELIVERY_STATUS_LABELS = {
    "sent": "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
    "failed": "‚ö†Ô∏è –û—à–∏–±–∫–∏",
    "pending": "‚è≥ –í –æ—á–µ—Ä–µ–¥–∏",
    "unknown": "‚ùî –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
}

AB_STATUS_LABELS = {
    "draft": "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫",
    "running": "üü¢ –í —Ä–∞–±–æ—Ç–µ",
    "completed": "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω",
    "paused": "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
    "cancelled": "‚õî –û—Ç–º–µ–Ω—ë–Ω",
    "unknown": "‚ùî –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
}


Line = Tuple[str, bool]


def clean_enum_value(raw: Optional[str]) -> str:
    """Normalize enum values to lowercase keys."""
    if not raw:
        return "unknown"
    return str(raw).split(".")[-1].lower()


def format_percent(value: Optional[float]) -> str:
    """Format decimal ratio as percentage string."""
    try:
        numeric = float(value or 0)
    except (TypeError, ValueError):
        numeric = 0.0
    return f"{numeric * 100:.1f}%"


def _append(lines: List[Line], text: str, *, bold: bool = False) -> None:
    lines.append((text, bold))


def _build_report_lines(report: Dict[str, Any]) -> List[Line]:
    lines: List[Line] = []

    period = report.get("period_days", 30)
    generated_at = report.get("generated_at") or ""

    users = report.get("users", {})
    leads = report.get("leads", {})
    sales = report.get("sales", {})
    broadcasts = report.get("broadcasts", {})
    ab_tests = report.get("ab_tests", {})

    _append(lines, f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {period} –¥–Ω–µ–π", bold=True)
    _append(lines, "")
    _append(lines, "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", bold=True)
    _append(lines, f"‚Ä¢ –í—Å–µ–≥–æ: {users.get('total_users', 0)}")
    _append(lines, f"‚Ä¢ –ù–æ–≤—ã–µ: {users.get('new_users', 0)}")
    _append(lines, f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ 7–¥: {users.get('active_users', 0)}")

    segments = users.get("segments", {})
    if segments:
        _append(lines, "‚Ä¢ –°–µ–≥–º–µ–Ω—Ç—ã:")
        for key, count in sorted(segments.items()):
            label = SEGMENT_LABELS.get(clean_enum_value(key), key)
            _append(lines, f"   {label}: {count}")

    _append(lines, "")
    _append(lines, "üß≤ –õ–∏–¥—ã", bold=True)
    _append(lines, f"‚Ä¢ –í—Å–µ–≥–æ: {leads.get('total_leads', 0)}")
    _append(lines, f"‚Ä¢ –ù–æ–≤—ã–µ: {leads.get('new_leads', 0)}")

    lead_statuses = leads.get("lead_statuses", {})
    if lead_statuses:
        _append(lines, "‚Ä¢ –°—Ç–∞—Ç—É—Å—ã:")
        for key, count in sorted(lead_statuses.items()):
            label = LEAD_STATUS_LABELS.get(clean_enum_value(key), key)
            _append(lines, f"   {label}: {count}")

    _append(lines, "")
    _append(lines, "üí≥ –ü—Ä–æ–¥–∞–∂–∏", bold=True)
    _append(lines, f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {sales.get('total_revenue', 0):,.0f} ‚ÇΩ")
    _append(lines, f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {sales.get('successful_payments', 0)}")
    _append(lines, f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {sales.get('avg_order_value', 0):,.0f} ‚ÇΩ")

    deliveries = (broadcasts.get("deliveries") or {})
    _append(lines, "")
    _append(lines, "üì¢ –†–∞—Å—Å—ã–ª–∫–∏", bold=True)
    _append(lines, f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {broadcasts.get('total_broadcasts', 0)}")
    _append(lines, f"‚Ä¢ –ó–∞ –ø–µ—Ä–∏–æ–¥: {broadcasts.get('broadcasts_last_period', 0)}")
    _append(lines, "‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∏:")
    if deliveries:
        _append(lines, f"   Œ£ –í—Å–µ–≥–æ: {deliveries.get('total', 0)}")
        _append(lines, f"   {DELIVERY_STATUS_LABELS.get('sent')}: {deliveries.get('sent', 0)}")
        _append(lines, f"   {DELIVERY_STATUS_LABELS.get('failed')}: {deliveries.get('failed', 0)}")
        _append(lines, f"   {DELIVERY_STATUS_LABELS.get('pending')}: {deliveries.get('pending', 0)}")
        _append(lines, f"   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ: {deliveries.get('unique_recipients', 0)}")
        avg_reach = deliveries.get("avg_recipients_per_broadcast", 0)
        if isinstance(avg_reach, (int, float)):
            _append(lines, f"   üë• –°—Ä. –æ—Ö–≤–∞—Ç: {avg_reach:.1f}")
        else:
            _append(lines, f"   üë• –°—Ä. –æ—Ö–≤–∞—Ç: {avg_reach}")
        _append(lines, f"   ‚ö†Ô∏è –û—à–∏–±–∫–∏: {format_percent(deliveries.get('failure_rate'))}")

    latest = broadcasts.get("latest")
    if latest:
        title = latest.get("title") or "‚Äî"
        created_at = latest.get("created_at") or "‚Äî"
        _append(lines, f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è: {title} ({created_at})")

    summary = ab_tests.get("summary") or {}
    _append(lines, "")
    _append(lines, "üß™ A/B —Ç–µ—Å—Ç—ã", bold=True)
    _append(lines, f"‚Ä¢ –í—Å–µ–≥–æ: {summary.get('total', 0)}")
    _append(lines, f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {summary.get('running', 0)}")
    _append(lines, f"‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ: {summary.get('completed', 0)}")

    tests = ab_tests.get("tests") or []
    for test in tests:
        status_value = test.get("status", "unknown")
        status_label = AB_STATUS_LABELS.get(clean_enum_value(status_value), status_value)
        metric_value = str(test.get("metric", "CTR")).upper()
        _append(lines, "")
        _append(lines, f"#{test.get('id')} {test.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}", bold=True)
        _append(
            lines,
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_label} | –ú–µ—Ç—Ä–∏–∫–∞: {metric_value} | –ü–æ–ø—É–ª—è—Ü–∏—è: {test.get('population', 0)}%",
        )

        winner = test.get("winner")
        if winner:
            metric = str(winner.get("metric", "ctr")).upper()
            _append(
                lines,
                f"‚Ä¢ –õ–∏–¥–µ—Ä: –≤–∞—Ä–∏–∞–Ω—Ç {winner.get('variant')} ({metric} {format_percent(winner.get('score'))})",
            )

        for variant in test.get("variants", []):
            _append(
                lines,
                "   "
                + f"{variant.get('variant')}: –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {variant.get('delivered', 0)}, "
                + f"CTR {format_percent(variant.get('ctr'))}, CR {format_percent(variant.get('cr'))}, "
                + f"–∫–æ–Ω–≤–µ—Ä—Å–∏–∏ {variant.get('conversions', 0)}",
            )

    if generated_at:
        _append(lines, "")
        _append(lines, f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {generated_at}")

    return lines


def format_report_for_telegram(report: Dict[str, Any]) -> str:
    """Format analytics report with Telegram-friendly markup."""
    parts = []
    for text, bold in _build_report_lines(report):
        if not text:
            parts.append("")
            continue
        parts.append(f"<b>{text}</b>" if bold else text)
    return "\n".join(parts)


def format_report_as_text(report: Dict[str, Any]) -> str:
    """Format analytics report as plain text."""
    return "\n".join(text for text, _ in _build_report_lines(report))


def format_broadcast_metrics(metrics: Dict[str, Any]) -> str:
    """Render broadcast metrics section as HTML-ready text."""
    deliveries = metrics.get("deliveries") or {}
    latest = metrics.get("latest") or {}

    lines = [
        "üì¢ <b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–æ–∫</b>",
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {metrics.get('total_broadcasts', 0)}",
        f"‚Ä¢ –ó–∞ –ø–µ—Ä–∏–æ–¥: {metrics.get('broadcasts_last_period', 0)}",
        "",
        "üóÇ <b>–î–æ—Å—Ç–∞–≤–∫–∏</b>",
        f"‚Ä¢ Œ£ –í—Å–µ–≥–æ: {deliveries.get('total', 0)}",
        f"‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {deliveries.get('sent', 0)}",
        f"‚Ä¢ ‚ö†Ô∏è –û—à–∏–±–∫–∏: {deliveries.get('failed', 0)}",
        f"‚Ä¢ ‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {deliveries.get('pending', 0)}",
        f"‚Ä¢ üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ: {deliveries.get('unique_recipients', 0)}",
    ]

    avg_reach = deliveries.get("avg_recipients_per_broadcast")
    if isinstance(avg_reach, (int, float)):
        lines.append(f"‚Ä¢ üë• –°—Ä. –æ—Ö–≤–∞—Ç: {avg_reach:.1f}")
    elif avg_reach is not None:
        lines.append(f"‚Ä¢ üë• –°—Ä. –æ—Ö–≤–∞—Ç: {avg_reach}")

    failure_rate = deliveries.get("failure_rate")
    if isinstance(failure_rate, (int, float)):
        lines.append(f"‚Ä¢ ‚ö†Ô∏è –û—à–∏–±–∫–∏: {format_percent(failure_rate)}")

    if latest:
        title = latest.get("title") or "‚Äî"
        created_at = latest.get("created_at") or "‚Äî"
        lines.extend([
            "",
            "üïí <b>–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>",
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}",
            f"‚Ä¢ –î–∞—Ç–∞: {created_at}",
        ])

    return "\n".join(lines)


__all__ = [
    "AB_STATUS_LABELS",
    "DELIVERY_STATUS_LABELS",
    "LEAD_STATUS_LABELS",
    "SEGMENT_LABELS",
    "clean_enum_value",
    "format_percent",
    "format_report_as_text",
    "format_report_for_telegram",
    "format_broadcast_metrics",
]
