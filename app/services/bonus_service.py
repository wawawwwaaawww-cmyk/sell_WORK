
"""Bonus repository for managing bonus content."""

from __future__ import annotations

from typing import List

import structlog
from aiogram.types import FSInputFile, Message
from sqlalchemy.ext.asyncio import AsyncSession

from app.models import Material, MaterialType, MaterialVersion
from app.repositories.material_repository import MaterialRepository
from app.services.bonus_content_manager import BonusContentManager


class BonusRepository:
    """Repository wrapper around MaterialRepository for bonus content."""

    def __init__(self, session: AsyncSession):
        self.session = session
        self.material_repository = MaterialRepository(session)
        self.logger = structlog.get_logger()

    async def get_welcome_bonuses(self, limit: int = 5) -> List[Material]:
        """Return materials tagged as welcome bonuses."""
        bonuses = await self.material_repository.get_materials_by_tags(["welcome", "bonus"], limit)
        if len(bonuses) < limit:
            extras = await self.material_repository.get_materials_by_type(MaterialType.BONUS, limit)
            for material in extras:
                if material not in bonuses:
                    bonuses.append(material)
                if len(bonuses) >= limit:
                    break
        return bonuses[:limit]

    async def get_bonus_by_tag(self, tag: str, limit: int = 3) -> List[Material]:
        """Return bonus materials filtered by tag."""
        return await self.material_repository.get_materials_by_tags([tag], limit)


class BonusService:
    """Service orchestrating bonus selection and formatting."""

    def __init__(self, session: AsyncSession):
        self.session = session
        self.repository = BonusRepository(session)
        self.logger = structlog.get_logger()

    async def send_bonus(self, message: Message) -> None:
        """Send the bonus file to the user."""
        try:
            bonus_file_path, bonus_caption = BonusContentManager.load_published_bonus()
            document = FSInputFile(bonus_file_path)

            await message.answer_document(document, caption=bonus_caption)
            self.logger.info("Bonus file sent successfully", user_id=message.from_user.id)
        except FileNotFoundError:
            self.logger.error("Bonus file not found.", path=BonusContentManager.get_bonus_path())
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ–Ω—É—Å–Ω—ã–π —Ñ–∞–π–ª —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!")
        except Exception as e:
            self.logger.error("Failed to send bonus file", error=str(e), exc_info=True)
            raise

    async def get_welcome_bonus_text(self) -> str:
        """Prepare formatted text with welcome bonuses."""
        bonuses = await self.repository.get_welcome_bonuses()
        if not bonuses:
            return self._default_bonus_text()

        lines: List[str] = ["üéÅ **–û—Ç–ª–∏—á–Ω–æ! –î–µ—Ä–∂–∏ —Å–≤–æ–∏ –±–æ–Ω—É—Å—ã:**", ""]
        for index, bonus in enumerate(bonuses, start=1):
            lines.append(f"{index}. **{bonus.title}**")
            preview = self._material_preview(bonus)
            if preview:
                lines.append(f"   {preview}")
            link = self._material_link(bonus)
            if link:
                lines.append(f"   üîó [–ü–æ–ª—É—á–∏—Ç—å]({link})")
            lines.append("")
        lines.append("üí° *–≠—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!*")
        lines.append("")
        lines.append("–ì–æ—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è? üéØ")
        return "\n".join(lines)

    def _material_preview(self, material: Material, max_length: int = 120) -> str:
        version: MaterialVersion | None = material.active_version
        source = version.extracted_text if version and version.extracted_text else material.summary
        if not source:
            return ""
        preview = source.strip().replace("\n", " ")
        if len(preview) > max_length:
            preview = preview[: max_length - 3] + "..."
        return preview

    def _material_link(self, material: Material) -> str:
        version: MaterialVersion | None = material.active_version
        if version:
            link = version.primary_asset_url
            if link:
                return link
        return ""

    def _default_bonus_text(self) -> str:
        """Fallback text when catalogue has no bonus materials."""
        return """üéÅ **–û—Ç–ª–∏—á–Ω–æ! –î–µ—Ä–∂–∏ —Å–≤–æ–∏ –±–æ–Ω—É—Å—ã:**

1. **–ì–∞–π–¥ "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"**
   –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
   üîó [–°–∫–∞—á–∞—Ç—å PDF](https://example.com/guide1)

2. **–ß–µ–∫-–ª–∏—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**
   –ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤
   üîó [–û—Ç–∫—Ä—ã—Ç—å —á–µ–∫-–ª–∏—Å—Ç](https://example.com/checklist)

3. **–í–∏–¥–µ–æ "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –±–∏—Ä–∂—É"**
   –û–±–∑–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–∏—Ä–∂ –∏ –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
   üîó [–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ](https://example.com/video1)

4. **–°–ª–æ–≤–∞—Ä—å –∫—Ä–∏–ø—Ç–æ—Ç–µ—Ä–º–∏–Ω–æ–≤**
   200+ —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
   üîó [–û—Ç–∫—Ä—ã—Ç—å —Å–ª–æ–≤–∞—Ä—å](https://example.com/dictionary)

5. **Telegram-–∫–∞–Ω–∞–ª —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π**
   –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–∑–æ—Ä—ã —Ä—ã–Ω–∫–∞ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
   üîó [–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è](https://t.me/cryptoanalysis)

üí° *–≠—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!*

–ì–æ—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è? üéØ"""
