"""Development Telegram Sales Bot - Temporary Clean Version"""

import asyncio
from pathlib import Path

# Add current directory to path
import sys
sys.path.insert(0, str(Path(__file__).parent))

from app.logging_config import setup_logging

setup_logging()

import structlog

from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from pydantic_settings import BaseSettings
from pydantic import Field

logger = structlog.get_logger(__name__)

class Settings(BaseSettings):
    """Bot settings"""
    telegram_bot_token: str = Field(..., env="TELEGRAM_BOT_TOKEN")
    openai_api_key: str = Field(..., env="OPENAI_API_KEY") 
    admin_ids: str = Field(default="", env="ADMIN_IDS")
    
    class Config:
        env_file = ".env"

# Load settings
try:
    settings = Settings()
    logger.info("‚úÖ Settings loaded successfully")
except Exception as exc:
    logger.error("‚ùå Error loading settings", error=str(exc), exc_info=True)
    # Fallback to direct token
    settings = type('Settings', (), {
        'telegram_bot_token': "8490095311:AAGHt_W7oO7KnaxvKEp55wvYypQbBge4LTQ",
        'openai_api_key': "your_key",
        'admin_ids': "123456789"
    })()

# Create bot and dispatcher
bot = Bot(token=settings.telegram_bot_token)
dp = Dispatcher()
router = Router()

@router.message(Command("start"))
async def start_handler(message: Message):
    """Handle /start command"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", callback_data="survey_start")],
        [InlineKeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="get_materials")],
        [InlineKeyboardButton(text="üí∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã", callback_data="view_courses")]
    ])
    
    await message.answer(
        "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∫–æ–ª—É –∫—Ä–∏–ø—Ç–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è!</b>\n\n"
        "–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n"
        "‚úÖ <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–æ–∂—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è\n"
        "‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏\n"
        "‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—é –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—é –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã 24/7\n\n"
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data == "survey_start")
async def survey_start(callback: CallbackQuery):
    """Start survey"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¥ –ù–æ–≤–∏—á–æ–∫", callback_data="level_beginner")],
        [InlineKeyboardButton(text="üü° –ë–∞–∑–æ–≤—ã–π", callback_data="level_basic")],
        [InlineKeyboardButton(text="üü¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")]
    ])
    
    await callback.message.edit_text(
        "üéØ <b>–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –í–æ–ø—Ä–æ—Å 1/5</b>\n\n"
        "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data.startswith("level_"))
async def level_selected(callback: CallbackQuery):
    """Handle level selection"""
    level = callback.data.split("_")[1]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫", callback_data="goal_profit")],
        [InlineKeyboardButton(text="üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="goal_education")],
        [InlineKeyboardButton(text="üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="goal_security")]
    ])
    
    await callback.message.edit_text(
        "üéØ <b>–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –í–æ–ø—Ä–æ—Å 2/5</b>\n\n"
        "–ö–∞–∫–∞—è –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∏–∑—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data.startswith("goal_"))
async def goal_selected(callback: CallbackQuery):
    """Handle goal selection"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì± –ì–æ—Ç–æ–≤ —Å–µ–π—á–∞—Å", callback_data="time_now")],
        [InlineKeyboardButton(text="‚è∞ –í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", callback_data="time_week")],
        [InlineKeyboardButton(text="üìÖ –í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞", callback_data="time_month")]
    ])
    
    await callback.message.edit_text(
        "üéØ <b>–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –í–æ–ø—Ä–æ—Å 3/5</b>\n\n"
        "–ö–æ–≥–¥–∞ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data.startswith("time_"))
async def time_selected(callback: CallbackQuery):
    """Handle time selection"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ –î–æ 10,000 ‚ÇΩ", callback_data="budget_low")],
        [InlineKeyboardButton(text="üí∞ 10,000-50,000 ‚ÇΩ", callback_data="budget_medium")],
        [InlineKeyboardButton(text="üíé –ë–æ–ª–µ–µ 50,000 ‚ÇΩ", callback_data="budget_high")]
    ])
    
    await callback.message.edit_text(
        "üéØ <b>–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –í–æ–ø—Ä–æ—Å 4/5</b>\n\n"
        "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–µ?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data.startswith("budget_"))
async def budget_selected(callback: CallbackQuery):
    """Handle budget selection"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="contact_phone")],
        [InlineKeyboardButton(text="‚úâÔ∏è Email", callback_data="contact_email")],
        [InlineKeyboardButton(text="üí¨ –¢–æ–ª—å–∫–æ Telegram", callback_data="contact_telegram")]
    ])
    
    await callback.message.edit_text(
        "üéØ <b>–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –í–æ–ø—Ä–æ—Å 5/5</b>\n\n"
        "–ö–∞–∫ —Å –≤–∞–º–∏ –ª—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data.startswith("contact_"))
async def survey_complete(callback: CallbackQuery):
    """Complete survey"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="get_materials")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        "‚úÖ <b>–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        "üéØ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
        "‚Ä¢ –°–µ–≥–º–µ–Ω—Ç: –¢–ï–ü–õ–´–ô üî•\n"
        "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: 8/10\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∫—É—Ä—Å: '–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞'\n\n"
        "üìã <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n"
        "–Ø –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –≥–æ—Ç–æ–≤ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º.\n\n"
        "üéÅ <b>–ë–æ–Ω—É—Å:</b> –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–µ–≥–æ–¥–Ω—è - —Å–∫–∏–¥–∫–∞ 30% –Ω–∞ –ª—é–±–æ–π –∫—É—Ä—Å!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data == "get_materials")
async def get_materials(callback: CallbackQuery):
    """Send materials"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        "üìö <b>–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n\n"
        "1. üìñ <b>'–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö'</b>\n"
        "   –ü–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n\n"
        "2. üí∞ <b>'5 –æ—à–∏–±–æ–∫ –Ω–æ–≤–∏—á–∫–æ–≤ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö'</b>\n"
        "   –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ—Ä—å –ø—Ä–∏ –ø–µ—Ä–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö\n\n"
        "3. üõ°Ô∏è <b>'–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'</b>\n"
        "   –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∑–∞—â–∏—Ç–µ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–æ–≤\n\n"
        "4. üìä <b>'–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'</b>\n"
        "   –û—Å–Ω–æ–≤—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n\n"
        "üì© <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —Ä–∞–∑–±–æ—Ä–∞ –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("time_"))
async def time_booked(callback: CallbackQuery):
    """Confirm booking"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã", callback_data="view_courses")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        "‚úÖ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
        "üìÖ <b>–î–µ—Ç–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∏:</b>\n"
        "‚Ä¢ –î–∞—Ç–∞: –°–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ –í—Ä–µ–º—è: 15:00 (–ú–°–ö)\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: Zoom-–∑–≤–æ–Ω–æ–∫\n"
        "‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤\n\n"
        "üì± <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
        "–ó–∞ 15 –º–∏–Ω—É—Ç –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
        "üéÅ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å:</b>\n"
        "–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫—É—Ä—Å–∞ —Å–µ–≥–æ–¥–Ω—è - —Å–∫–∏–¥–∫–∞ 30% + –±–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 15,000‚ÇΩ\n\n"
        "üí° –•–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å –Ω–∞—à–∏ –∫—É—Ä—Å—ã –∑–∞—Ä–∞–Ω–µ–µ?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data == "view_courses")
async def view_courses(callback: CallbackQuery):
    """Show courses"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ '–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞' - 24,990‚ÇΩ", callback_data="course_basic")],
        [InlineKeyboardButton(text="üöÄ '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥' - 49,990‚ÇΩ", callback_data="course_advanced")],
        [InlineKeyboardButton(text="üíé 'VIP –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ' - 99,990‚ÇΩ", callback_data="course_vip")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        "üí∞ <b>–ù–∞—à–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>\n\n"
        "üìö <b>1. '–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞'</b>\n"
        "‚Ä¢ 6 –Ω–µ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ 24 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–∫–∞\n"
        "‚Ä¢ –õ–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä\n"
        "‚Ä¢ –¶–µ–Ω–∞: 24,990‚ÇΩ (—Å–æ —Å–∫–∏–¥–∫–æ–π 17,493‚ÇΩ)\n\n"
        "üöÄ <b>2. '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥'</b>\n"
        "‚Ä¢ 12 –Ω–µ–¥–µ–ª—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞\n"
        "‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        "‚Ä¢ –¶–µ–Ω–∞: 49,990‚ÇΩ (—Å–æ —Å–∫–∏–¥–∫–æ–π 34,993‚ÇΩ)\n\n"
        "üíé <b>3. 'VIP –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ'</b>\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n"
        "‚Ä¢ –õ–∏—á–Ω—ã–π –º–µ–Ω—Ç–æ—Ä\n"
        "‚Ä¢ –†–∞–∑–±–æ—Ä –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫\n"
        "‚Ä¢ –¶–µ–Ω–∞: 99,990‚ÇΩ (—Å–æ —Å–∫–∏–¥–∫–æ–π 69,993‚ÇΩ)\n\n"
        "üéÅ <b>–°–∫–∏–¥–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data.startswith("course_"))
async def course_selected(callback: CallbackQuery):
    """Handle course selection"""
    course_map = {
        "course_basic": ("–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞", "24,990‚ÇΩ", "17,493‚ÇΩ"),
        "course_advanced": ("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥", "49,990‚ÇΩ", "34,993‚ÇΩ"),
        "course_vip": ("VIP –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", "99,990‚ÇΩ", "69,993‚ÇΩ")
    }
    
    course_name, original_price, discount_price = course_map.get(callback.data, ("–ö—É—Ä—Å", "0‚ÇΩ", "0‚ÇΩ"))
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å", url="https://payment.example.com/pay")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton(text="üîô –ö –∫—É—Ä—Å–∞–º", callback_data="view_courses")]
    ])
    
    await callback.message.edit_text(
        f"üìö <b>'{course_name}'</b>\n\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞: ~~{original_price}~~\n"
        f"‚Ä¢ –í–∞—à–∞ —Ü–µ–Ω–∞: <b>{discount_price}</b>\n"
        f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: 30%\n\n"
        f"üéÅ <b>–ë–æ–Ω—É—Å—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤\n"
        f"‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ 15,000‚ÇΩ\n"
        f"‚Ä¢ 3 –º–µ—Å—è—Ü–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        f"‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–∞\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –û–±—É—á–µ–Ω–∏–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å–≤—è–∑–∞–Ω—ã —Å —Ä–∏—Å–∫–∞–º–∏. –ú—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å, –Ω–æ –¥–∞–µ–º –∑–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.\n\n"
        f"‚úÖ <b>100% –≥–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data == "main_menu")
async def main_menu(callback: CallbackQuery):
    """Return to main menu"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", callback_data="survey_start")],
        [InlineKeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="get_materials")],
        [InlineKeyboardButton(text="üí∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã", callback_data="view_courses")]
    ])
    
    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# Removed echo handler - will be replaced with LLM integration

# Register router
dp.include_router(router)

async def main():
    """Main function"""
    print("üöÄ Starting Telegram Sales Bot in Virtual Environment...")
    print(f"üêç Python version: {sys.version}")
    print(f"üìÇ Working directory: {Path.cwd()}")
    print(f"ü§ñ Bot token: {settings.telegram_bot_token[:10]}...")
    print("‚úÖ All systems ready!")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())