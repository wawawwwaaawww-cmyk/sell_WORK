1) Цель и результат

Цель: умный Telegram-бот, который ведёт пользователя по воронке, общается естественно «как менеджер», выявляет потребности, снимает возражения, предлагает релевантную программу/следующий шаг, записывает на консультацию, передаёт заявки в канал менеджеров, при необходимости — отправляет ссылку на оплату. Тон — доброжелательный, без обещаний гарантированной прибыли, без давления и спорной риторики. 

ТЗ ИИ-продажник (2)

Результат: работающий бот (webhook-режим) + сервер FastAPI, Neon/Postgres c миграциями, полные сценарии и тексты, модуль A/B-тестов и статистика.

2) Стек и общие требования

Язык: Python 3.11+ (async).

TG SDK: aiogram v3 (webhook).

Web: FastAPI + Uvicorn.

БД: Neon (PostgreSQL), sslmode=require, пул соединений (asyncpg + PgBouncer/Neon pooling).

ORM/миграции: SQLAlchemy 2.x (async) + Alembic.

LLM: OpenAI API, абстрактный интерфейс (возможность подмены провайдера).

Планировщик: APScheduler (UTC, хранение job-id в БД).

Логи: JSON в stdout, корреляция по request_id/user_id, /metrics (Prometheus-совместимые).

Промпты: Только из ./prompts/*.txt (см. §9).

3) Глоссарий

СТС — созвон/консультация с экспертом. Выбор 2 ближайших дат + слот 12/14/16/18 (МСК), напоминание за 15 минут, перенос. 

ТЗ ИИ-продажник (2)

Лид — пользователь, у которого сформирована заявка (карточка в канале менеджеров, кнопка «Взять заявку»). 

ТЗ ИИ-продажник (2)

A/B — тест двух вариантов рассылки; выбор победителя по метрикам (CTR/CR), рассылка победителя остальной базе. 

ТЗ ИИ-продажник (2)

4) E2E-логика работы бота (пошагово)
4.1. /start → приветствие → бонус → предложение «подобрать инструмент»

Пользователь жмёт /start.

Бот отправляет приветственное сообщение и кнопку «Получить бонус». Кнопки — inline. 

ТЗ ИИ-продажник (2)

После выдачи бонуса — предложение подобрать инструмент инвестирования: «Готов начать?» Если «Да» — запускается анкета; если «Нет» — мягкая ветвь «обсудим общие стратегии → вопрос: надёжность или рост?» 

ТЗ ИИ-продажник (2)

Примечание по бонусам: перечень подарков и их ссылки (универсальные, без завязки на конкретный запуск) подтягиваются из БД/конфига; приветственный текст — из набора контента (может редактироваться админом). 

ТЗ ИИ-продажник (2)

4.2. «Надёжность vs Рост» (если пользователь не готов к анкете)

При выборе «Надёжность» бот кратко объясняет стратегии (стейблкоины/стейкинг/доходные продукты), потом мягкий CTA к консультации/дальнейшему диалогу. Тон — ненавязчивый. 

ТЗ ИИ-продажник (2)

Аналогично для «Рост» — объяснения, затем CTA.

4.3. Анкета (5 вопросов) → баллы → сегмент

Анкета из 5 вопросов с вариантами и предопределёнными баллами. Примеры формулировок и реакций-подтверждений — из исходника. Сумма баллов даёт сегмент: cold / warm / hot (диапазоны фиксируются в конфигурации). 

ТЗ ИИ-продажник (2)

 

ТЗ ИИ-продажник (2)

Все ответы логируются в events (см. §8).

После завершения — краткое резюме профиля (LLM-сводка) + старт сценария по сегменту.

4.4. Сценарии диалога (LLM + Policy)

4 целевые сценария: Новичок, Продвинутый трейдер, Инвестор с капиталом, Скептик.

На каждом шаге LLM генерирует «человечный» ответ и CTA (кнопки), а policy-слой детерминированно выбирает следующий шаг и не допускает нарушений (обещаний дохода, давления, повторов без новой ценности).

В нужных узлах — подбор материалов (1–3 шт.) под сегмент и шаг (кейсы, отзывы, аргументы).

При высокой готовности (hot) — прямое предложение: запись на консультацию или оплата (см. ниже). Программа показывается одна, в соответствии с потребностями и ответами; ссылки на внутренние лендинги — для разработчика/контента, не для отправки клиенту. 

ТЗ ИИ-продажник (2)

4.5. Запись на консультацию (СТС)

Бот предлагает две ближайшие даты (относительно «сейчас», TZ=Europe/Moscow).

Пользователь выбирает дату → бот предлагает слот 12:00 / 14:00 / 16:00 / 18:00 (МСК).

На каждом шаге есть «Нет подходящего варианта» → свободный ввод даты/времени (валидация и подтверждение).

Создаётся запись, ставится напоминание за 15 минут; при отказе — быстрый перенос (повтор дат/слотов). 

ТЗ ИИ-продажник (2)


(При масштабировании возможна интеграция YClients.) 

ТЗ ИИ-продажник (2)

4.6. Заявка и канал менеджеров («Взять заявку»)

При появлении явного интереса или брони СТС создаётся лид и в закрытый канал менеджеров уходит карточка: имя, @, телефон, e-mail, опыт, цель, бюджет, статус (например: «назначен на консультацию [дата/время]»), и краткая сводка диалога (2–4 предложения). Внизу — кнопка «✅ Взять заявку». 

ТЗ ИИ-продажник (2)

 

ТЗ ИИ-продажник (2)

Нажатие «Взять заявку» → заявка скрывается из канала, назначается на нажавшего менеджера, менеджеру в ЛС уходит карточка и ссылка «Открыть диалог». 

ТЗ ИИ-продажник (2)

 

ТЗ ИИ-продажник (2)

4.7. Перехват диалога менеджером

В карточке лида или через меню админ-раздела доступен перехват: все последующие сообщения становятся role=manager (от лица бота), есть кнопка «Вернуть боту». Возможна реализация либо в текущем боте (раздел уведомлений), либо отдельный бот для менеджеров (при росте). 

ТЗ ИИ-продажник (2)

4.8. Оплата (для «горячих»)

Кнопка/команда «Отправить ссылку на оплату» создаёт order_id, сохраняет платёж status='created', выдаёт персональную ссылку. В канал менеджеров прилетает уведомление «пользователю @username отправлена ссылка на оплату». Подтверждение оплаты — через webhook (GetCourse): при paid → у пользователя статус «оплатил», отключаем прогрев, включаем послепродажный сценарий. 

ТЗ ИИ-продажник (2)

 

ТЗ ИИ-продажник (2)

4.9. /help, FAQ, «Связаться с менеджером»

В меню: /help (краткая инструкция), Ответы на частые вопросы, Связаться с менеджером (создаёт лид «перехват»). 

ТЗ ИИ-продажник (2)

4.10. A/B-тесты рассылок + статистика

A/B: два варианта на 10–20% аудитории; ожидание 12–24 часа; выбор победителя по CTR/CR; рассылка победителя остальным. KPI: CTR, CR, Response, Unsubscribe, Delivery. 

ТЗ ИИ-продажник (2)

 

ТЗ ИИ-продажник (2)

Общая аналитика: пользователи (всего/новые), распределение по баллам/этапам, блокировки/неактив, заявки, конверсия по этапам. 

ТЗ ИИ-продажник (2)

5) Архитектура модулей

app/main.py — точка входа FastAPI (веб-хуки, healthz, metrics).

app/bot.py — инициализация aiogram, middlewares (логирование, контекст пользователя, rate-limit).

app/handlers/ — обработчики команд/кнопок (start, бонусы, анкета, слоты, помощь, рассылки).

app/scenes/ — сценовые обработчики (анкета, сценарии по сегменту, консультация, оплата).

app/services/ — llm.py (обёртка OpenAI), payments.py, materials.py, broadcasts.py, abtesting.py, leads.py.

app/models/ — SQLAlchemy модели.

app/repositories/ — работа с БД (users, events, leads, appointments, payments, materials, products, faq, broadcasts, ab_*).

app/admin/ — команды и меню для админов/менеджеров.

app/safety/ — валидация LLM-ответов (детект «обещаний дохода» и пр.), фильтры токсичности.

app/utils/ — таймзоны, форматирование, callback-data фабрики.

prompts/ — все промпты LLM как .txt (см. §9).

6) LLM: «умный менеджер» — дизайн
6.1. Входные данные LLM

user_profile (имя, опыт/цель/бюджет/канал прихода), survey_summary (5 ответов + баллы), segment, funnel_stage, последние N сообщений, candidate_materials (3 штуки, если есть), products (1-2 релевантных оффера с УТП).

6.2. Системный промпт (в prompts/system_manager.txt)

Роль: опытный менеджер онлайн-школы по крипте, без обещаний прибыли, вежливо, по делу, с CTA.

Нормы безопасности/соответствия.

Стиль: разговорный, короткие абзацы, ясные формулировки.

6.3. Формат вывода LLM (строго JSON)
{
  "reply_text": "…",
  "buttons": [{"text":"…","callback":"…"}],
  "next_action": "ask|show_materials|offer_consult|offer_payment|escalate_to_manager",
  "confidence": 0.0
}

6.4. Policy-слой (детерминированный)

Если segment='hot' и есть сигналы намерения → приоритизировать offer_payment или offer_consult.

Защита от «обещаний дохода» и рискованных тезисов — замена на безопасные формулировки + совет обсудить на консультации.

Без повторов одного и того же оффера подряд без новой ценности — добавлять кейс/отзыв.

При confidence < 0.5 трижды подряд → escalate_to_manager.

«Пропал пользователь» — follow-up через 24/72 часа (APScheduler).

6.5. Подбор материалов

services/materials.pick(user, k=3) — отбор по сегменту/тегам/этапу; отдаёт краткий список для LLM, который вплетает 1–2 ссылки/тезиса в ответ.

7) Детализация анкеты и сегментации

5 вопросов с фиксированными вариантами и баллами; реплики-подтверждения — как в исходнике. Пример 5-го вопроса с баллами и последующей логикой записи на СТС — в документе. 

ТЗ ИИ-продажник (2)

 

ТЗ ИИ-продажник (2)

Диапазоны сегментов (конфиг): 0–5 → cold, 6–10 → warm, 11+ → hot.

После анкеты: краткая сводка LLM + старт сценария.

8) Модель данных (Neon/Postgres) — таблицы и индексы

users(id PK, telegram_id UNIQUE, username, first_name, last_name, phone, email, segment, lead_score, funnel_stage, source, is_blocked, created_at, updated_at)
Индексы: (telegram_id), (segment), (created_at)

events(id PK, user_id FK, type, payload JSONB, created_at)
Индексы: (user_id, created_at), (type, created_at)

survey_answers(id PK, user_id FK, question_code, answer_code, points, created_at)

funnels(id PK, name, description, is_active, version)
user_funnel_state(id PK, user_id FK, funnel_id FK, step, context JSONB, updated_at)
messages(id PK, user_id FK, role ENUM('user','bot','manager'), text, meta JSONB, created_at)

materials(id PK, type ENUM('case','review','article','argument','faq','other'), title, body, url, tags TEXT[], segments TEXT[], is_active, created_at)

products(id PK, code UNIQUE, name, description, price NUMERIC(12,2), meta JSONB, is_active)

leads(id PK, user_id FK, status ENUM('new','taken','done','paid','canceled'), summary, assigned_manager_id BIGINT NULL, created_at, updated_at)

appointments(id PK, user_id FK, date DATE, slot TIME, tz TEXT, status ENUM('scheduled','rescheduled','canceled','completed'), reminder_job_id TEXT, created_at)

payments(id PK, user_id FK, product_id FK, order_id UNIQUE, amount NUMERIC(12,2), status ENUM('created','sent','paid','failed','canceled'), payload JSONB, created_at, updated_at)

broadcasts(id PK, title, body, buttons JSONB, segment_filter JSONB, created_at)

ab_tests(id PK, name, population INT, metric ENUM('CTR','CR'), status ENUM('draft','running','completed'), created_at)
ab_variants(id PK, ab_test_id FK, variant_code, title, body, buttons JSONB, weight SMALLINT)
ab_results(id PK, ab_test_id FK, variant_code, delivered INT, clicks INT, conversions INT, responses INT, unsub INT)

admins(telegram_id PK, role ENUM('owner','admin','editor','manager'), created_at)

9) Папка prompts/ — структура и правила

Все файлы в формате .txt, без Markdown. Должны загружаться в рантайме, а не прошиваться в код.

Обязательные файлы:

system_manager.txt — системная роль и стиль общения (без обещаний прибыли; CTA; короткие ответы).

sales_spin_aida.txt — методика SPIN + AIDA + работа с возражениями (для генерации мини-скриптов менеджеру). 

ТЗ ИИ-продажник (2)

safety_policies.txt — запрещённые формулировки/тезисы, примеры безопасных замен.

materials_selector.txt — краткие инструкции по миксу материалов для сегментов.

summarizer.txt — сводка анкеты и последних сообщений (для «контекста клиента»).

followups.txt — шаблоны follow-up сообщений (24/72 часа).

consult_offer.txt — шаблон предложения СТС + вариант переносов. 

ТЗ ИИ-продажник (2)

payment_offer.txt — шаблон предложения оплаты («горячим») + оговорки безопасности. 

ТЗ ИИ-продажник (2)

help_faq.txt — короткая справка /help и ответы на частые вопросы. 

ТЗ ИИ-продажник (2)

Технические требования к промптам:

UTF-8, без BOM; CRLF или LF допустимы.

Переменные {{placeholders}} для подстановки данных (segment, goal, etc.).

Версионирование: при изменении — новый файл *-v2.txt, хранить ссылку на версию в БД (funnels.version).

10) Телеграм-интерфейс: команды, кнопки, callback-протокол

Команды пользователя: /start, /help. Кнопки меню: «🎁 Бонусы», «📊 Подбор инструмента», «🗓 Записаться», «👤 Связаться с менеджером». 

ТЗ ИИ-продажник (2)

 

ТЗ ИИ-продажник (2)

Команды админа/менеджера: /broadcast, /ab_start, /stats, /content, /leads.

callback_data формата action[:subaction][:id] (≤64 байт). Обязательные:
bonus:get, survey:start, survey:q<n>:<answer>, consult:date:<YYYY-MM-DD>, consult:time:<HH:MM>, consult:custom, consult:confirm, consult:reschedule, lead:take:<id>, offer:pay:<pid>, faq:<id>, manager:request.

11) Рассылки и A/B-тестирование

Broadcast: выбор сегмента(ов) → текст → кнопки → предпросмотр → отправка.

A/B: два варианта на подвыборке 10–20% базы; ожидание 12–24ч; выбор победителя (по CTR/CR) → авторассылка остальным. KPI: CTR, CR, Response, Unsub, Delivery. 

ТЗ ИИ-продажник (2)

База знаний по A/B (заголовок, формат, визуал, CTA, время отправки) — учитывать как параметры варианта. 

ТЗ ИИ-продажник (2)

12) Аналитика и отчётность

Дашборд: пользователи (всего/новые), по баллам/этапам, заявки, конверсия, блокировки/неактив. Экспорт CSV. 

ТЗ ИИ-продажник (2)

13) Интеграции

Оплаты (GetCourse): POST /webhook/getcourse (HMAC, order_id, status). При paid → payments.status='paid', leads.status='paid', отключить прогрев и включить послепродажный сценарий. 

ТЗ ИИ-продажник (2)

Онлайн-запись (опционально): YClients для актуального расписания, если понадобится масштабировать СТС. 

ТЗ ИИ-продажник (2)

14) API (FastAPI)

POST /telegram/webhook — апдейты TG.

POST /webhook/getcourse — уведомления об оплате (HMAC).

GET /healthz — health-check.

GET /metrics — Prometheus-метрики.

15) Безопасность и соответствие

Подписи веб-хуков (HMAC), rate-limits на запросы.

PII (телефон/email) — только после согласия пользователя (кнопка «📱 Отправить телефон»), хранить минимально необходимое, доступ по ролям. 

ТЗ ИИ-продажник (2)

Жёсткий запрет в LLM-ответах: «гарантированная прибыль», «безрисковый доход» и т. п. (см. safety_policies.txt).

Neon — только sslmode=require, ночные бэкапы, ограничение ролей БД.

16) Планировщик задач (APScheduler)

Напоминание о СТС за 15 минут; после «не приду» — быстрый перенос. 

ТЗ ИИ-продажник (2)

Follow-up при молчании 24/72 часа (по сценарию сегмента).

A/B довоз: запуск победителя через 12–24ч после старта теста. 

ТЗ ИИ-продажник (2)

17) Нефункциональные

Производительность: P95 < 2.5s при 100 RPS на чтение, кэшировать статический текст.

Надёжность: автоперезапуск, ретраи веб-хуков (экспоненциальный backoff), ежедневные бэкапы.

Наблюдаемость: логи JSON + метрики (кол-во апдейтов, ошибки, доставки, клики, конверсии).

18) Тест-кейсы (приёмка)

/start и бонусы

 Кнопка «Получить бонус» присутствует; выдаёт корректный набор; событие логируется. 

ТЗ ИИ-продажник (2)

Анкета/сегментация

 5 вопросов, баллы суммируются; реплики-подтверждения; сегмент установлен. 

ТЗ ИИ-продажник (2)

Диалог LLM

 Ответы естественные, с ценностью и CTA; нет обещаний дохода; при сложностях — эскалация.

Запись и напоминания

 Предлагаются две ближайшие даты и слоты 12/14/16/18 (МСК); reminder за 15 минут; перенос работает. 

ТЗ ИИ-продажник (2)

Лиды и «Взять заявку»

 Карточка лида содержит поля; «Взять заявку» назначает менеджера и скрывает карточку. 

ТЗ ИИ-продажник (2)

 

ТЗ ИИ-продажник (2)

Оплата и веб-хук

 order_id создаётся; при paid меняется статус, прогрев отключается. 

ТЗ ИИ-продажник (2)

A/B и статистика

 A/B на 10–20%; выбор победителя; рассылка; сбор метрик CTR/CR/Response/Unsub/Delivery. 

ТЗ ИИ-продажник (2)

19) Развёртывание

Создать Neon DB (EU), SSL; прописать DATABASE_URL.

Применить Alembic миграции.

FastAPI + Uvicorn за Nginx (HTTPS, Let’s Encrypt).

Установить Telegram webhook на POST /telegram/webhook.

Настроить логи/метрики/бэкапы.

20) Структура репозитория
tg-sales-bot/
  app/
    main.py
    bot.py
    config.py
    db.py
    middlewares/
    handlers/          # start, bonus, survey, consult, help, payments
    scenes/            # сценарии по сегментам
    services/          # llm, materials, leads, payments, broadcasts, abtesting
    repositories/
    admin/             # команды и панели админов/менеджеров
    safety/            # фильтры и валидация LLM-ответов
    utils/
  prompts/             # ВСЕ промпты (.txt). Обязательно отдельными файлами!
    system_manager.txt
    sales_spin_aida.txt
    safety_policies.txt
    materials_selector.txt
    summarizer.txt
    followups.txt
    consult_offer.txt
    payment_offer.txt
    help_faq.txt
  migrations/          # Alembic
  tests/               # pytest: unit + интеграционные
  docker-compose.yml
  requirements.txt
  README.md

21) Контент и начальные данные

Приветствие + бонусы (универсальные ссылки) — актуальные наборы в БД, редактируются админом. 

ТЗ ИИ-продажник (2)

Тексты для /help и FAQ — базовые рыбы (редактируются). 

ТЗ ИИ-продажник (2)

Сегментные материалы (кейсы/отзывы/аргументы) — минимум 5–10 на сегмент (cold/warm/hot).

Список продуктов (код, название, описание, цена) — 1–2 ключевых оффера; в переписке показываем один, по потребностям. 

ТЗ ИИ-продажник (2)

22) Согласования и ограничения

Никаких «тупых» ответов — LLM-тон и policy обеспечивают «человечный» стиль, ценность в каждом ответе.

Отправка рекламных лендингов напрямую пользователю не требуется (лендинги — внутренняя справка для команды). 

ТЗ ИИ-продажник (2)

Если нужен онлайн-календарь с занятостью менеджеров — подключаем YClients (опционально). 

ТЗ ИИ-продажник (2)

Итого

Спецификация покрывает всю логику: приветствие/бонусы, «надёжность/рост», анкета/баллы/сегменты, «умный менеджер» (LLM + policy + материалы), запись на СТС (2 даты + 4 слота + reminder), лиды и «Взять заявку», перехват диалога менеджером, оплата через ссылку + webhook, /help и FAQ, рассылки с A/B-тестами и аналитикой, БД под Neon, безопасность, деплой, тест-кейсы. Промпты обязательно вынесены в папку prompts отдельными .txt-файлами и подгружаются динамически.