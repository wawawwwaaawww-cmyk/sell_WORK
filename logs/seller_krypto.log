{"level": "info", "file_path": "/home/botseller/sell/logs/seller_krypto.log", "event": "Logging configured successfully", "logger": "logging_setup", "timestamp": "2025-10-09T13:34:34.826044Z"}
{"event": "\ud83d\udc51 Creating first admin user", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:34:35.242064Z"}
{"event": "\ud83d\udc51 Starting admin creation flow", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:34:35.242964Z"}
{"raw_value": "12345", "event": "\ud83d\udce5 Received Telegram ID input", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:34:35.243283Z"}
{"telegram_id": 12345, "event": "\ud83d\udd10 Valid Telegram ID parsed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:34:35.243491Z"}
{"telegram_id": 12345, "event": "\ud83d\udd0d Checking for existing admin", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:34:35.243838Z"}
{"event": "select pg_catalog.version()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:35.308039Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:35.308381Z"}
{"event": "select current_schema()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:35.310687Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:35.310966Z"}
{"event": "show standard_conforming_strings", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:35.312403Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:35.312669Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:35.313923Z"}
{"event": "SELECT admins.telegram_id AS admins_telegram_id, admins.role AS admins_role, admins.created_at AS admins_created_at \nFROM admins \nWHERE admins.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:35.374974Z"}
{"event": "[generated in 0.00075s] (12345,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:35.375303Z"}
{"event": "ROLLBACK", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:35.377768Z"}
{"error": "(sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedTableError'>: relation \"admins\" does not exist\n[SQL: SELECT admins.telegram_id AS admins_telegram_id, admins.role AS admins_role, admins.created_at AS admins_created_at \nFROM admins \nWHERE admins.telegram_id = $1::BIGINT]\n[parameters: (12345,)]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "event": "\u274c Error creating admin", "level": "error", "logger": "__main__", "timestamp": "2025-10-09T13:34:35.378398Z", "exception": "Traceback (most recent call last):\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 510, in _prepare_and_execute\n    prepared_stmt, attributes = await adapt_connection._prepare(\n                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 756, in _prepare\n    prepared_stmt = await self._connection.prepare(\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/asyncpg/connection.py\", line 636, in prepare\n    return await self._prepare(\n           ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/asyncpg/connection.py\", line 654, in _prepare\n    stmt = await self._get_statement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/asyncpg/connection.py\", line 433, in _get_statement\n    statement = await self._protocol.prepare(\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"asyncpg/protocol/protocol.pyx\", line 166, in prepare\nasyncpg.exceptions.UndefinedTableError: relation \"admins\" does not exist\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1967, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py\", line 941, in do_execute\n    cursor.execute(statement, parameters)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 568, in execute\n    self._adapt_connection.await_(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py\", line 132, in await_only\n    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py\", line 196, in greenlet_spawn\n    value = await result\n            ^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 546, in _prepare_and_execute\n    self._handle_exception(error)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 497, in _handle_exception\n    self._adapt_connection._handle_exception(error)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 780, in _handle_exception\n    raise translated_error from error\nsqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.ProgrammingError: <class 'asyncpg.exceptions.UndefinedTableError'>: relation \"admins\" does not exist\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/botseller/sell/create_admin.py\", line 40, in create_first_admin\n    existing_admin = await session.get(Admin, telegram_id)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py\", line 604, in get\n    return await greenlet_spawn(\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py\", line 201, in greenlet_spawn\n    result = context.throw(*sys.exc_info())\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py\", line 3693, in get\n    return self._get_impl(\n           ^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py\", line 3873, in _get_impl\n    return db_load_fn(\n           ^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/loading.py\", line 694, in load_on_pk_identity\n    session.execute(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py\", line 2362, in execute\n    return self._execute_internal(\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py\", line 2247, in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py\", line 305, in orm_execute_statement\n    result = conn.execute(\n             ^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1418, in execute\n    return meth(\n           ^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py\", line 515, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1640, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1846, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1986, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 2355, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1967, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py\", line 941, in do_execute\n    cursor.execute(statement, parameters)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 568, in execute\n    self._adapt_connection.await_(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py\", line 132, in await_only\n    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py\", line 196, in greenlet_spawn\n    value = await result\n            ^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 546, in _prepare_and_execute\n    self._handle_exception(error)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 497, in _handle_exception\n    self._adapt_connection._handle_exception(error)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 780, in _handle_exception\n    raise translated_error from error\nsqlalchemy.exc.ProgrammingError: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedTableError'>: relation \"admins\" does not exist\n[SQL: SELECT admins.telegram_id AS admins_telegram_id, admins.role AS admins_role, admins.created_at AS admins_created_at \nFROM admins \nWHERE admins.telegram_id = $1::BIGINT]\n[parameters: (12345,)]\n(Background on this error at: https://sqlalche.me/e/20/f405)"}
{"level": "info", "file_path": "/home/botseller/sell/logs/seller_krypto.log", "event": "Logging configured successfully", "logger": "logging_setup", "timestamp": "2025-10-09T13:34:50.568021Z"}
{"event": "\ud83d\udc51 Creating first admin user", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:34:51.000504Z"}
{"event": "\ud83d\udc51 Starting admin creation flow", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:34:51.001629Z"}
{"raw_value": "12345", "event": "\ud83d\udce5 Received Telegram ID input", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:34:51.002920Z"}
{"telegram_id": 12345, "event": "\ud83d\udd10 Valid Telegram ID parsed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:34:51.003232Z"}
{"telegram_id": 12345, "event": "\ud83d\udd0d Checking for existing admin", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:34:51.003554Z"}
{"event": "select pg_catalog.version()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:51.077648Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:51.077979Z"}
{"event": "select current_schema()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:51.081142Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:51.081469Z"}
{"event": "show standard_conforming_strings", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:51.083147Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:51.083437Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:51.084883Z"}
{"event": "SELECT admins.telegram_id AS admins_telegram_id, admins.role AS admins_role, admins.created_at AS admins_created_at \nFROM admins \nWHERE admins.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:51.140844Z"}
{"event": "[generated in 0.00072s] (12345,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:51.141512Z"}
{"event": "ROLLBACK", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:34:51.143932Z"}
{"error": "(sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedTableError'>: relation \"admins\" does not exist\n[SQL: SELECT admins.telegram_id AS admins_telegram_id, admins.role AS admins_role, admins.created_at AS admins_created_at \nFROM admins \nWHERE admins.telegram_id = $1::BIGINT]\n[parameters: (12345,)]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "event": "\u274c Error creating admin", "level": "error", "logger": "__main__", "timestamp": "2025-10-09T13:34:51.144485Z", "exception": "Traceback (most recent call last):\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 510, in _prepare_and_execute\n    prepared_stmt, attributes = await adapt_connection._prepare(\n                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 756, in _prepare\n    prepared_stmt = await self._connection.prepare(\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/asyncpg/connection.py\", line 636, in prepare\n    return await self._prepare(\n           ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/asyncpg/connection.py\", line 654, in _prepare\n    stmt = await self._get_statement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/asyncpg/connection.py\", line 433, in _get_statement\n    statement = await self._protocol.prepare(\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"asyncpg/protocol/protocol.pyx\", line 166, in prepare\nasyncpg.exceptions.UndefinedTableError: relation \"admins\" does not exist\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1967, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py\", line 941, in do_execute\n    cursor.execute(statement, parameters)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 568, in execute\n    self._adapt_connection.await_(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py\", line 132, in await_only\n    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py\", line 196, in greenlet_spawn\n    value = await result\n            ^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 546, in _prepare_and_execute\n    self._handle_exception(error)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 497, in _handle_exception\n    self._adapt_connection._handle_exception(error)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 780, in _handle_exception\n    raise translated_error from error\nsqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.ProgrammingError: <class 'asyncpg.exceptions.UndefinedTableError'>: relation \"admins\" does not exist\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/botseller/sell/create_admin.py\", line 40, in create_first_admin\n    existing_admin = await session.get(Admin, telegram_id)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py\", line 604, in get\n    return await greenlet_spawn(\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py\", line 201, in greenlet_spawn\n    result = context.throw(*sys.exc_info())\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py\", line 3693, in get\n    return self._get_impl(\n           ^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py\", line 3873, in _get_impl\n    return db_load_fn(\n           ^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/loading.py\", line 694, in load_on_pk_identity\n    session.execute(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py\", line 2362, in execute\n    return self._execute_internal(\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py\", line 2247, in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py\", line 305, in orm_execute_statement\n    result = conn.execute(\n             ^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1418, in execute\n    return meth(\n           ^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py\", line 515, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1640, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1846, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1986, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 2355, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py\", line 1967, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py\", line 941, in do_execute\n    cursor.execute(statement, parameters)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 568, in execute\n    self._adapt_connection.await_(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py\", line 132, in await_only\n    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py\", line 196, in greenlet_spawn\n    value = await result\n            ^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 546, in _prepare_and_execute\n    self._handle_exception(error)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 497, in _handle_exception\n    self._adapt_connection._handle_exception(error)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py\", line 780, in _handle_exception\n    raise translated_error from error\nsqlalchemy.exc.ProgrammingError: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedTableError'>: relation \"admins\" does not exist\n[SQL: SELECT admins.telegram_id AS admins_telegram_id, admins.role AS admins_role, admins.created_at AS admins_created_at \nFROM admins \nWHERE admins.telegram_id = $1::BIGINT]\n[parameters: (12345,)]\n(Background on this error at: https://sqlalche.me/e/20/f405)"}
{"level": "info", "file_path": "/home/botseller/sell/logs/seller_krypto.log", "event": "Logging configured successfully", "logger": "logging_setup", "timestamp": "2025-10-09T13:36:08.897279Z"}
{"event": "\ud83d\udc51 Creating first admin user", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:09.359071Z"}
{"event": "\ud83d\udc51 Starting admin creation flow", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:09.360106Z"}
{"raw_value": "12345", "event": "\ud83d\udce5 Received Telegram ID input", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:09.360418Z"}
{"telegram_id": 12345, "event": "\ud83d\udd10 Valid Telegram ID parsed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:09.360718Z"}
{"telegram_id": 12345, "event": "\ud83d\udd0d Checking for existing admin", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:09.361102Z"}
{"event": "select pg_catalog.version()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.425954Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.426249Z"}
{"event": "select current_schema()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.431291Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.431571Z"}
{"event": "show standard_conforming_strings", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.441503Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.442146Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.446146Z"}
{"event": "SELECT admins.telegram_id AS admins_telegram_id, admins.role AS admins_role, admins.created_at AS admins_created_at \nFROM admins \nWHERE admins.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.516221Z"}
{"event": "[generated in 0.00076s] (12345,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.516644Z"}
{"telegram_id": 12345, "role": "owner", "event": "\ud83d\udee0\ufe0f Creating admin", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:09.519854Z"}
{"event": "INSERT INTO admins (telegram_id, role) VALUES ($1::BIGINT, $2::VARCHAR) RETURNING admins.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.523860Z"}
{"event": "[generated in 0.00061s] (12345, <AdminRole.OWNER: 'owner'>)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.524248Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:09.527173Z"}
{"telegram_id": 12345, "event": "\u2705 Admin created successfully", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:09.528476Z"}
{"level": "info", "file_path": "/home/botseller/sell/logs/seller_krypto.log", "event": "Logging configured successfully", "logger": "logging_setup", "timestamp": "2025-10-09T13:36:24.658144Z"}
{"event": "\ud83e\ude7a Starting system health check", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:24.658985Z"}
{"check": "check_imports", "event": "\u25b6\ufe0f Executing health check", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:24.659190Z"}
{"event": "\ud83d\udce6 Checking project imports", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:24.659410Z"}
{"error": "cannot import name 'admin_enhanced' from 'app.handlers' (/home/botseller/sell/app/handlers/__init__.py)", "event": "\u274c Import error", "level": "error", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.813440Z", "exception": "Traceback (most recent call last):\n  File \"/home/botseller/sell/health_check.py\", line 99, in check_imports\n    from app.handlers import (\nImportError: cannot import name 'admin_enhanced' from 'app.handlers' (/home/botseller/sell/app/handlers/__init__.py)"}
{"check": "check_imports", "result": false, "event": "\u2705 Health check completed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.814759Z"}
{"check": "check_config", "event": "\u25b6\ufe0f Executing health check", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.814988Z"}
{"event": "\u2699\ufe0f  Checking configuration", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.815153Z"}
{"event": "\u2705 Configuration is valid", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.815317Z"}
{"check": "check_config", "result": true, "event": "\u2705 Health check completed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.815459Z"}
{"check": "check_database", "event": "\u25b6\ufe0f Executing health check", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.815653Z"}
{"event": "\ud83d\uddc4\ufe0f  Checking database connection", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.815841Z"}
{"event": "select pg_catalog.version()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:28.873559Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:28.873866Z"}
{"event": "select current_schema()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:28.875839Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:28.876066Z"}
{"event": "show standard_conforming_strings", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:28.877381Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:28.877593Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:28.878868Z"}
{"event": "SELECT 1", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:28.879484Z"}
{"event": "[generated in 0.00027s] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:28.879725Z"}
{"event": "\u2705 Database connection successful", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.880649Z"}
{"event": "ROLLBACK", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:36:28.881222Z"}
{"check": "check_database", "result": true, "event": "\u2705 Health check completed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.881688Z"}
{"check": "check_bot_token", "event": "\u25b6\ufe0f Executing health check", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.881925Z"}
{"event": "\ud83e\udd16 Checking bot token", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:28.882128Z"}
{"username": "Seller_krypto_bot", "event": "\u2705 Bot token valid", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:29.119406Z"}
{"check": "check_bot_token", "result": true, "event": "\u2705 Health check completed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:29.119868Z"}
{"results": [false, true, true, true], "event": "\u274c Some health checks failed", "level": "warning", "logger": "__main__", "timestamp": "2025-10-09T13:36:29.120063Z"}
{"success": false, "event": "Health check completed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:36:29.121718Z"}
{"event": "Unclosed client session\nclient_session: <aiohttp.client.ClientSession object at 0x7cd2ff7e1fa0>", "level": "error", "logger": "asyncio", "timestamp": "2025-10-09T13:36:29.488164Z"}
{"event": "Unclosed connector\nconnections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x7cd2ff132e10>, 4309612.865848619)]']\nconnector: <aiohttp.connector.TCPConnector object at 0x7cd30475dc40>", "level": "error", "logger": "asyncio", "timestamp": "2025-10-09T13:36:29.488477Z"}
{"level": "info", "file_path": "/home/botseller/sell/logs/seller_krypto.log", "event": "Logging configured successfully", "logger": "logging_setup", "timestamp": "2025-10-09T13:37:00.116342Z"}
{"event": "\ud83e\ude7a Starting system health check", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:00.117309Z"}
{"check": "check_imports", "event": "\u25b6\ufe0f Executing health check", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:00.117572Z"}
{"event": "\ud83d\udce6 Checking project imports", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:00.117803Z"}
{"event": "\u2705 All imports successful", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.407873Z"}
{"check": "check_imports", "result": true, "event": "\u2705 Health check completed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.408704Z"}
{"check": "check_config", "event": "\u25b6\ufe0f Executing health check", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.409017Z"}
{"event": "\u2699\ufe0f  Checking configuration", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.409335Z"}
{"event": "\u2705 Configuration is valid", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.409563Z"}
{"check": "check_config", "result": true, "event": "\u2705 Health check completed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.409887Z"}
{"check": "check_database", "event": "\u25b6\ufe0f Executing health check", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.410115Z"}
{"event": "\ud83d\uddc4\ufe0f  Checking database connection", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.410339Z"}
{"event": "select pg_catalog.version()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:37:04.478679Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:37:04.479040Z"}
{"event": "select current_schema()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:37:04.481509Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:37:04.481886Z"}
{"event": "show standard_conforming_strings", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:37:04.483842Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:37:04.484120Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:37:04.485731Z"}
{"event": "SELECT 1", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:37:04.486479Z"}
{"event": "[generated in 0.00050s] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:37:04.486877Z"}
{"event": "\u2705 Database connection successful", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.488086Z"}
{"event": "ROLLBACK", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:37:04.488702Z"}
{"check": "check_database", "result": true, "event": "\u2705 Health check completed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.489160Z"}
{"check": "check_bot_token", "event": "\u25b6\ufe0f Executing health check", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.489433Z"}
{"event": "\ud83e\udd16 Checking bot token", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.489662Z"}
{"username": "Seller_krypto_bot", "event": "\u2705 Bot token valid", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.729835Z"}
{"check": "check_bot_token", "result": true, "event": "\u2705 Health check completed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.730297Z"}
{"event": "\ud83c\udf89 All health checks passed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.730549Z"}
{"success": true, "event": "Health check completed", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:37:04.732045Z"}
{"event": "Unclosed client session\nclient_session: <aiohttp.client.ClientSession object at 0x7cdf7e72dca0>", "level": "error", "logger": "asyncio", "timestamp": "2025-10-09T13:37:05.153441Z"}
{"event": "Unclosed connector\nconnections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x7cdf7e711310>, 4309648.477240617)]']\nconnector: <aiohttp.connector.TCPConnector object at 0x7cdf7f5a1700>", "level": "error", "logger": "asyncio", "timestamp": "2025-10-09T13:37:05.153768Z"}
{"level": "info", "file_path": "/home/botseller/sell/logs/seller_krypto.log", "event": "Logging configured successfully", "logger": "logging_setup", "timestamp": "2025-10-09T13:38:21.786014Z"}
{"event": "Starting Telegram Sales Bot in development mode...", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:38:26.016464Z"}
{"event": "Bot will use polling mode (no webhook required)", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:38:26.017049Z"}
{"event": "Press Ctrl+C to stop the bot", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:38:26.017254Z"}
{"event": "Starting bot in polling mode", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:38:26.017968Z"}
{"event": "Bot commands set successfully", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:38:26.279672Z"}
{"mode": "polling", "event": "Bot started successfully", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:38:26.280098Z"}
{"event": "Start polling", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:38:26.281140Z"}
{"event": "Run polling for bot @Seller_krypto_bot id=8490095311 - 'Seller KRYPTO'", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:38:26.336079Z"}
{"request_id": "baab426f-036c-43c5-bc13-d9e65f78badd", "user_id": 5481270774, "username": "aawwwaww", "event_type": "Message", "text": "/start", "content_type": "text", "event": "Incoming message", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:38:26.416555Z"}
{"event": "select pg_catalog.version()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.474402Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.474906Z"}
{"event": "select current_schema()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.477142Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.477452Z"}
{"event": "show standard_conforming_strings", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.479064Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.479337Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.481091Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.536020Z"}
{"event": "[generated in 0.00085s] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.536369Z"}
{"event": "INSERT INTO users (telegram_id, username, first_name, last_name, phone, email, segment, lead_score, funnel_stage, source, is_blocked) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::VARCHAR, $5::VARCHAR, $6::VARCHAR, $7::VARCHAR, $8::INTEGER, $9::VARCHAR, $10::VARCHAR, $11::BOOLEAN) RETURNING users.id, users.created_at, users.updated_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.543124Z"}
{"event": "[generated in 0.00078s] (5481270774, 'aawwwaww', '\ud83d\udc40', None, None, None, None, 0, <FunnelStage.NEW: 'new'>, None, False)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.543409Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.549152Z"}
{"event": "[generated in 0.00055s] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.549442Z"}
{"user_id": 1, "telegram_id": 5481270774, "username": "aawwwaww", "event": "User created", "level": "info", "logger": "app.repositories.user_repository", "timestamp": "2025-10-09T13:38:26.551159Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.552142Z"}
{"event": "[cached since 0.01697s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.552433Z"}
{"user_id": 1, "event": "Start command processed, bonus offered", "level": "info", "logger": "app.handlers.start", "timestamp": "2025-10-09T13:38:26.826396Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:26.827392Z"}
{"request_id": "baab426f-036c-43c5-bc13-d9e65f78badd", "user_id": 5481270774, "username": "aawwwaww", "event_type": "Message", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:38:26.829066Z"}
{"event": "Update id=40341228 is handled. Duration 413 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:38:26.829645Z"}
{"request_id": "45e9672f-2bf3-4cba-a509-a5437e7687f2", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "bonus:get_file", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:38:32.542718Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:32.546148Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:32.550214Z"}
{"event": "[cached since 6.015s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:32.550512Z"}
{"error": "HTTP Client says - ClientOSError: [Errno 2] Can not write request body for https://api.telegram.org/bot8490095311:AAGHt_W7oO7KnaxvKEp55wvYypQbBge4LTQ/sendDocument", "event": "Error sending bonus file or follow-up", "level": "error", "logger": "app.handlers.start", "timestamp": "2025-10-09T13:38:32.648050Z", "exception": "Traceback (most recent call last):\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client_reqrep.py\", line 667, in write_bytes\n    await self.body.write(writer)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/multipart.py\", line 1010, in write\n    await part.write(writer)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/payload.py\", line 487, in write\n    chunk = await self._iter.__anext__()\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/types/input_file.py\", line 103, in read\n    async with aiofiles.open(self.path, \"rb\") as f:\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiofiles/base.py\", line 63, in __aenter__\n    return await self\n           ^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiofiles/base.py\", line 59, in __await__\n    self._obj = yield from self._coro.__await__()\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiofiles/threadpool/__init__.py\", line 92, in _open\n    f = await loop.run_in_executor(executor, cb)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.12/concurrent/futures/thread.py\", line 58, in run\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nFileNotFoundError: [Errno 2] No such file or directory: 'bonus/bonus.pdf'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/session/aiohttp.py\", line 181, in make_request\n    async with session.post(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client.py\", line 1360, in __aenter__\n    self._resp: _RetType = await self._coro\n                           ^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client.py\", line 690, in _request\n    await resp.start(conn)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client_reqrep.py\", line 1059, in start\n    message, payload = await protocol.read()  # type: ignore[union-attr]\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/streams.py\", line 644, in read\n    await self._waiter\naiohttp.client_exceptions.ClientOSError: [Errno 2] Can not write request body for https://api.telegram.org/bot8490095311:AAGHt_W7oO7KnaxvKEp55wvYypQbBge4LTQ/sendDocument\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/botseller/sell/app/handlers/start.py\", line 68, in send_bonus_file\n    await callback.message.answer_document(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/methods/base.py\", line 84, in emit\n    return await bot(self)\n           ^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/bot.py\", line 488, in __call__\n    return await self.session(self, method, timeout=request_timeout)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/session/base.py\", line 254, in __call__\n    return cast(TelegramType, await middleware(bot, method))\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/session/aiohttp.py\", line 188, in make_request\n    raise TelegramNetworkError(method=method, message=f\"{type(e).__name__}: {e}\")\naiogram.exceptions.TelegramNetworkError: HTTP Client says - ClientOSError: [Errno 2] Can not write request body for https://api.telegram.org/bot8490095311:AAGHt_W7oO7KnaxvKEp55wvYypQbBge4LTQ/sendDocument"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:38:32.857746Z"}
{"request_id": "45e9672f-2bf3-4cba-a509-a5437e7687f2", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:38:32.858685Z"}
{"event": "Update id=40341229 is handled. Duration 317 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:38:32.859189Z"}
{"event": "Received SIGTERM signal", "level": "warning", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:40:26.755555Z"}
{"event": "Polling stopped for bot @Seller_krypto_bot id=8490095311 - 'Seller KRYPTO'", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:40:26.756378Z"}
{"event": "Polling stopped", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:40:26.756791Z"}
{"level": "info", "file_path": "/home/botseller/sell/logs/seller_krypto.log", "event": "Logging configured successfully", "logger": "logging_setup", "timestamp": "2025-10-09T13:40:26.874900Z"}
{"event": "Webhook removed successfully", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:40:27.201397Z"}
{"event": "Bot shutdown completed", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:40:27.454876Z"}
{"event": "Starting Telegram Sales Bot in development mode...", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:40:30.844426Z"}
{"event": "Bot will use polling mode (no webhook required)", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:40:30.845368Z"}
{"event": "Press Ctrl+C to stop the bot", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:40:30.845869Z"}
{"event": "Starting bot in polling mode", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:40:30.846717Z"}
{"event": "Bot commands set successfully", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:40:31.082003Z"}
{"mode": "polling", "event": "Bot started successfully", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:40:31.082560Z"}
{"event": "Start polling", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:40:31.083719Z"}
{"event": "Run polling for bot @Seller_krypto_bot id=8490095311 - 'Seller KRYPTO'", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:40:31.136295Z"}
{"request_id": "fcc54c13-a007-410c-975a-1f35bce8f67a", "user_id": 5481270774, "username": "aawwwaww", "event_type": "Message", "text": "/start", "content_type": "text", "event": "Incoming message", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:40:35.546899Z"}
{"event": "select pg_catalog.version()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.601604Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.601925Z"}
{"event": "select current_schema()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.604018Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.604341Z"}
{"event": "show standard_conforming_strings", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.607309Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.607692Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.611002Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.668848Z"}
{"event": "[generated in 0.00077s] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.669201Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.673431Z"}
{"event": "[cached since 0.005341s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.673916Z"}
{"user_id": 1, "event": "Start command processed, bonus offered", "level": "info", "logger": "app.handlers.start", "timestamp": "2025-10-09T13:40:35.869928Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:35.870790Z"}
{"request_id": "fcc54c13-a007-410c-975a-1f35bce8f67a", "user_id": 5481270774, "username": "aawwwaww", "event_type": "Message", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:40:35.871704Z"}
{"event": "Update id=40341230 is handled. Duration 325 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:40:35.872168Z"}
{"request_id": "f14f4672-58a2-402b-b100-5628e9e26857", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "bonus:get_file", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:40:37.009920Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:37.012807Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:37.013392Z"}
{"event": "[cached since 1.345s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:37.013979Z"}
{"error": "HTTP Client says - ClientOSError: [Errno 2] Can not write request body for https://api.telegram.org/bot8490095311:AAGHt_W7oO7KnaxvKEp55wvYypQbBge4LTQ/sendDocument", "event": "Error sending bonus file or follow-up", "level": "error", "logger": "app.handlers.start", "timestamp": "2025-10-09T13:40:37.080171Z", "exception": "Traceback (most recent call last):\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client_reqrep.py\", line 667, in write_bytes\n    await self.body.write(writer)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/multipart.py\", line 1010, in write\n    await part.write(writer)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/payload.py\", line 487, in write\n    chunk = await self._iter.__anext__()\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/types/input_file.py\", line 103, in read\n    async with aiofiles.open(self.path, \"rb\") as f:\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiofiles/base.py\", line 63, in __aenter__\n    return await self\n           ^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiofiles/base.py\", line 59, in __await__\n    self._obj = yield from self._coro.__await__()\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiofiles/threadpool/__init__.py\", line 92, in _open\n    f = await loop.run_in_executor(executor, cb)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.12/concurrent/futures/thread.py\", line 58, in run\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nFileNotFoundError: [Errno 2] No such file or directory: 'bonus/bonus.pdf'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/session/aiohttp.py\", line 181, in make_request\n    async with session.post(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client.py\", line 1360, in __aenter__\n    self._resp: _RetType = await self._coro\n                           ^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client.py\", line 690, in _request\n    await resp.start(conn)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client_reqrep.py\", line 1059, in start\n    message, payload = await protocol.read()  # type: ignore[union-attr]\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/streams.py\", line 644, in read\n    await self._waiter\naiohttp.client_exceptions.ClientOSError: [Errno 2] Can not write request body for https://api.telegram.org/bot8490095311:AAGHt_W7oO7KnaxvKEp55wvYypQbBge4LTQ/sendDocument\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/botseller/sell/app/handlers/start.py\", line 68, in send_bonus_file\n    await callback.message.answer_document(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/methods/base.py\", line 84, in emit\n    return await bot(self)\n           ^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/bot.py\", line 488, in __call__\n    return await self.session(self, method, timeout=request_timeout)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/session/base.py\", line 254, in __call__\n    return cast(TelegramType, await middleware(bot, method))\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/session/aiohttp.py\", line 188, in make_request\n    raise TelegramNetworkError(method=method, message=f\"{type(e).__name__}: {e}\")\naiogram.exceptions.TelegramNetworkError: HTTP Client says - ClientOSError: [Errno 2] Can not write request body for https://api.telegram.org/bot8490095311:AAGHt_W7oO7KnaxvKEp55wvYypQbBge4LTQ/sendDocument"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:37.252088Z"}
{"request_id": "f14f4672-58a2-402b-b100-5628e9e26857", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:40:37.253157Z"}
{"event": "Update id=40341231 is handled. Duration 244 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:40:37.253725Z"}
{"request_id": "0e711824-20da-47d7-81fa-60b6d6263e67", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "bonus:get_file", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:40:39.442680Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:39.444810Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:39.445369Z"}
{"event": "[cached since 3.777s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:39.445666Z"}
{"error": "HTTP Client says - ClientOSError: [Errno 2] Can not write request body for https://api.telegram.org/bot8490095311:AAGHt_W7oO7KnaxvKEp55wvYypQbBge4LTQ/sendDocument", "event": "Error sending bonus file or follow-up", "level": "error", "logger": "app.handlers.start", "timestamp": "2025-10-09T13:40:39.507870Z", "exception": "Traceback (most recent call last):\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client_reqrep.py\", line 667, in write_bytes\n    await self.body.write(writer)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/multipart.py\", line 1010, in write\n    await part.write(writer)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/payload.py\", line 487, in write\n    chunk = await self._iter.__anext__()\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/types/input_file.py\", line 103, in read\n    async with aiofiles.open(self.path, \"rb\") as f:\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiofiles/base.py\", line 63, in __aenter__\n    return await self\n           ^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiofiles/base.py\", line 59, in __await__\n    self._obj = yield from self._coro.__await__()\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiofiles/threadpool/__init__.py\", line 92, in _open\n    f = await loop.run_in_executor(executor, cb)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.12/concurrent/futures/thread.py\", line 58, in run\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nFileNotFoundError: [Errno 2] No such file or directory: 'bonus/bonus.pdf'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/session/aiohttp.py\", line 181, in make_request\n    async with session.post(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client.py\", line 1360, in __aenter__\n    self._resp: _RetType = await self._coro\n                           ^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client.py\", line 690, in _request\n    await resp.start(conn)\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/client_reqrep.py\", line 1059, in start\n    message, payload = await protocol.read()  # type: ignore[union-attr]\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiohttp/streams.py\", line 644, in read\n    await self._waiter\naiohttp.client_exceptions.ClientOSError: [Errno 2] Can not write request body for https://api.telegram.org/bot8490095311:AAGHt_W7oO7KnaxvKEp55wvYypQbBge4LTQ/sendDocument\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/botseller/sell/app/handlers/start.py\", line 68, in send_bonus_file\n    await callback.message.answer_document(\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/methods/base.py\", line 84, in emit\n    return await bot(self)\n           ^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/bot.py\", line 488, in __call__\n    return await self.session(self, method, timeout=request_timeout)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/session/base.py\", line 254, in __call__\n    return cast(TelegramType, await middleware(bot, method))\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/botseller/sell/.venv/lib/python3.12/site-packages/aiogram/client/session/aiohttp.py\", line 188, in make_request\n    raise TelegramNetworkError(method=method, message=f\"{type(e).__name__}: {e}\")\naiogram.exceptions.TelegramNetworkError: HTTP Client says - ClientOSError: [Errno 2] Can not write request body for https://api.telegram.org/bot8490095311:AAGHt_W7oO7KnaxvKEp55wvYypQbBge4LTQ/sendDocument"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:40:39.679400Z"}
{"request_id": "0e711824-20da-47d7-81fa-60b6d6263e67", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:40:39.680325Z"}
{"event": "Update id=40341232 is handled. Duration 239 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:40:39.680876Z"}
{"event": "Received SIGTERM signal", "level": "warning", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:43:28.784072Z"}
{"event": "Polling stopped for bot @Seller_krypto_bot id=8490095311 - 'Seller KRYPTO'", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:43:28.785005Z"}
{"event": "Polling stopped", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:43:28.785344Z"}
{"level": "info", "file_path": "/home/botseller/sell/logs/seller_krypto.log", "event": "Logging configured successfully", "logger": "logging_setup", "timestamp": "2025-10-09T13:43:28.904303Z"}
{"event": "Webhook removed successfully", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:43:29.225447Z"}
{"event": "Bot shutdown completed", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:43:29.477072Z"}
{"event": "Starting Telegram Sales Bot in development mode...", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:43:32.979233Z"}
{"event": "Bot will use polling mode (no webhook required)", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:43:32.979727Z"}
{"event": "Press Ctrl+C to stop the bot", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:43:32.979927Z"}
{"event": "Starting bot in polling mode", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:43:32.980544Z"}
{"event": "Bot commands set successfully", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:43:33.186727Z"}
{"mode": "polling", "event": "Bot started successfully", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:43:33.187228Z"}
{"event": "Start polling", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:43:33.188192Z"}
{"event": "Run polling for bot @Seller_krypto_bot id=8490095311 - 'Seller KRYPTO'", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:43:33.238932Z"}
{"request_id": "7fc7e14e-92be-4319-ac0a-b18139d4b861", "user_id": 5481270774, "username": "aawwwaww", "event_type": "Message", "text": "/start", "content_type": "text", "event": "Incoming message", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:43:35.628924Z"}
{"event": "select pg_catalog.version()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.682723Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.686966Z"}
{"event": "select current_schema()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.690110Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.690603Z"}
{"event": "show standard_conforming_strings", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.692901Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.693172Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.695160Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.750806Z"}
{"event": "[generated in 0.00072s] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.751071Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.755335Z"}
{"event": "[cached since 0.005258s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.755708Z"}
{"user_id": 1, "event": "Start command processed, bonus offered", "level": "info", "logger": "app.handlers.start", "timestamp": "2025-10-09T13:43:35.982504Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:35.983253Z"}
{"request_id": "7fc7e14e-92be-4319-ac0a-b18139d4b861", "user_id": 5481270774, "username": "aawwwaww", "event_type": "Message", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:43:35.984142Z"}
{"event": "Update id=40341233 is handled. Duration 356 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:43:35.984586Z"}
{"request_id": "7bb04b90-91a2-477d-9cb9-db073ca77ea3", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "bonus:get_file", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:43:37.025687Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:37.027934Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:37.028412Z"}
{"event": "[cached since 1.278s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:37.028668Z"}
{"error": "[Errno 2] No such file or directory", "event": "Error sending bonus file or follow-up", "level": "error", "logger": "app.handlers.start", "timestamp": "2025-10-09T13:43:37.122078Z", "exception": "Traceback (most recent call last):\n  File \"/home/botseller/sell/app/handlers/start.py\", line 66, in send_bonus_file\n    bonus_file_path = os.path.abspath(\"bonus/bonus.pdf\")\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<frozen posixpath>\", line 423, in abspath\nFileNotFoundError: [Errno 2] No such file or directory"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:43:37.224887Z"}
{"request_id": "7bb04b90-91a2-477d-9cb9-db073ca77ea3", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:43:37.225929Z"}
{"event": "Update id=40341234 is handled. Duration 201 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:43:37.226646Z"}
{"event": "Received SIGTERM signal", "level": "warning", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:44:43.704888Z"}
{"event": "Polling stopped for bot @Seller_krypto_bot id=8490095311 - 'Seller KRYPTO'", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:44:43.705824Z"}
{"event": "Polling stopped", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:44:43.706067Z"}
{"level": "info", "file_path": "/home/botseller/sell/logs/seller_krypto.log", "event": "Logging configured successfully", "logger": "logging_setup", "timestamp": "2025-10-09T13:44:43.825235Z"}
{"event": "Webhook removed successfully", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:44:44.180441Z"}
{"event": "Bot shutdown completed", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:44:44.432329Z"}
{"event": "Starting Telegram Sales Bot in development mode...", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:44:47.740893Z"}
{"event": "Bot will use polling mode (no webhook required)", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:44:47.741682Z"}
{"event": "Press Ctrl+C to stop the bot", "level": "info", "logger": "__main__", "timestamp": "2025-10-09T13:44:47.741952Z"}
{"event": "Starting bot in polling mode", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:44:47.742793Z"}
{"event": "Bot commands set successfully", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:44:47.904648Z"}
{"mode": "polling", "event": "Bot started successfully", "level": "info", "logger": "app.bot", "timestamp": "2025-10-09T13:44:47.905060Z"}
{"event": "Start polling", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:44:47.905965Z"}
{"event": "Run polling for bot @Seller_krypto_bot id=8490095311 - 'Seller KRYPTO'", "level": "info", "logger": "aiogram.dispatcher", "timestamp": "2025-10-09T13:44:47.958069Z"}
{"request_id": "a083a7b8-e81b-4eae-8c89-44422a09e9aa", "user_id": 5481270774, "username": "aawwwaww", "event_type": "Message", "text": "/start", "content_type": "text", "event": "Incoming message", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:44:48.035269Z"}
{"event": "select pg_catalog.version()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.096012Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.096390Z"}
{"event": "select current_schema()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.099928Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.100207Z"}
{"event": "show standard_conforming_strings", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.102097Z"}
{"event": "[raw sql] ()", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.102531Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.104808Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.169132Z"}
{"event": "[generated in 0.00076s] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.169654Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.173755Z"}
{"event": "[cached since 0.005233s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.174254Z"}
{"user_id": 1, "event": "Start command processed, bonus offered", "level": "info", "logger": "app.handlers.start", "timestamp": "2025-10-09T13:44:48.366665Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:48.367638Z"}
{"request_id": "a083a7b8-e81b-4eae-8c89-44422a09e9aa", "user_id": 5481270774, "username": "aawwwaww", "event_type": "Message", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:44:48.368578Z"}
{"event": "Update id=40341235 is handled. Duration 334 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:44:48.369243Z"}
{"request_id": "6e25b007-c55d-41cf-bc2a-4efeb4e590e2", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "bonus:get_file", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:44:49.859210Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:49.861961Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:49.862748Z"}
{"event": "[cached since 1.694s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:49.863053Z"}
{"user_id": 5481270774, "event": "Bonus file sent", "level": "info", "logger": "app.handlers.start", "timestamp": "2025-10-09T13:44:50.347785Z"}
{"user_id": 5481270774, "event": "Bonus follow-up sent", "level": "info", "logger": "app.handlers.start", "timestamp": "2025-10-09T13:44:53.424348Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:53.425195Z"}
{"request_id": "6e25b007-c55d-41cf-bc2a-4efeb4e590e2", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:44:53.426150Z"}
{"event": "Update id=40341236 is handled. Duration 3568 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:44:53.426841Z"}
{"request_id": "08ed90ed-3e3d-47a6-ad69-665213517cd8", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "survey:start", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:44:54.721202Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.723691Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.724233Z"}
{"event": "[cached since 6.556s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.724527Z"}
{"path": "config/scenario_transitions.yaml", "event": "Scenario config not found, falling back to legacy scenes", "level": "warning", "logger": "app.scenes.scene_manager", "timestamp": "2025-10-09T13:44:54.726033Z"}
{"event": "UPDATE users SET funnel_stage=$1::VARCHAR, updated_at=now() WHERE users.id = $2::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.728980Z"}
{"event": "[generated in 0.00053s] (<FunnelStage.SURVEYED: 'surveyed'>, 1)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.729332Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.734689Z"}
{"event": "[generated in 0.00067s] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.734948Z"}
{"user_id": 1, "stage": "surveyed", "event": "User funnel stage updated", "level": "info", "logger": "app.repositories.user_repository", "timestamp": "2025-10-09T13:44:54.736553Z"}
{"event": "INSERT INTO events (user_id, type, payload) VALUES ($1::BIGINT, $2::VARCHAR, $3::JSON) RETURNING events.id, events.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.739498Z"}
{"event": "[generated in 0.00045s] (1, 'survey_started', '{}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.739841Z"}
{"event": "SELECT events.id, events.user_id, events.type, events.payload, events.created_at \nFROM events \nWHERE events.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.745109Z"}
{"event": "[generated in 0.00052s] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.745494Z"}
{"event_id": 1, "user_id": 1, "event_type": "survey_started", "event": "Event created", "level": "info", "logger": "app.services.event_service", "timestamp": "2025-10-09T13:44:54.747131Z"}
{"event": "DELETE FROM survey_answers WHERE survey_answers.user_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.750195Z"}
{"event": "[generated in 0.00055s] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.750793Z"}
{"user_id": 1, "event": "Deleted previous survey answers", "level": "info", "logger": "app.services.survey_service", "timestamp": "2025-10-09T13:44:54.752499Z"}
{"event": "INSERT INTO messages (user_id, role, text, meta) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::JSON) RETURNING messages.id, messages.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.871502Z"}
{"event": "[generated in 0.00075s] (1, <MessageRole.BOT: 'bot'>, '\ud83d\udccb **\u0410\u043d\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b**\\n\\n\ud83c\udfaf **\u041a\u0430\u043a\u043e\u0439 \u0443 \u0442\u0435\u0431\u044f \u043e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430\u043c\u0438?**\\n\\n*\u0412\u043e\u043f\u0440\u043e\u0441 1 \u0438\u0437 5*', '{\"context\": \"survey_start\", \"question\": \"q1\"}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.872015Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:54.960257Z"}
{"request_id": "08ed90ed-3e3d-47a6-ad69-665213517cd8", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:44:54.961823Z"}
{"event": "Update id=40341237 is handled. Duration 242 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:44:54.962763Z"}
{"request_id": "d46abcf1-1b78-4688-a47f-57ce47dc1d1d", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "survey:q1:beginner", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:44:58.791037Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.793973Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.794692Z"}
{"event": "[cached since 10.63s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.795006Z"}
{"event": "INSERT INTO survey_answers (user_id, question_code, answer_code, points) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::INTEGER) RETURNING survey_answers.id, survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.798127Z"}
{"event": "[generated in 0.00053s] (1, 'q1', 'beginner', 1)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.798642Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.803598Z"}
{"event": "[generated in 0.00239s] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.806034Z"}
{"user_id": 1, "question": "q1", "answer": "beginner", "points": 1, "event": "Survey answer saved", "level": "info", "logger": "app.services.survey_service", "timestamp": "2025-10-09T13:44:58.808073Z"}
{"event": "INSERT INTO events (user_id, type, payload) VALUES ($1::BIGINT, $2::VARCHAR, $3::JSON) RETURNING events.id, events.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.809328Z"}
{"event": "[cached since 4.07s ago] (1, 'survey_answer', '{\"question\": \"q1\", \"answer\": \"beginner\", \"points\": 0}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.809653Z"}
{"event": "SELECT events.id, events.user_id, events.type, events.payload, events.created_at \nFROM events \nWHERE events.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.812593Z"}
{"event": "[cached since 4.068s ago] (2,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.813072Z"}
{"event_id": 2, "user_id": 1, "event_type": "survey_answer", "event": "Event created", "level": "info", "logger": "app.services.event_service", "timestamp": "2025-10-09T13:44:58.814171Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.user_id = $1::BIGINT ORDER BY survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.816050Z"}
{"event": "[generated in 0.00048s] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.816396Z"}
{"event": "INSERT INTO messages (user_id, role, text, meta) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::JSON) RETURNING messages.id, messages.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.906568Z"}
{"event": "[cached since 4.036s ago] (1, <MessageRole.BOT: 'bot'>, '\u041e\u0442\u043b\u0438\u0447\u043d\u043e! \u0412\u0441\u0435 \u043a\u043e\u0433\u0434\u0430-\u0442\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u043b\u0438 \u0441 \u043d\u0443\u043b\u044f \ud83d\udc4d\\n\\n\ud83d\udcb0 **\u041a\u0430\u043a\u0430\u044f \u0443 \u0442\u0435\u0431\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c?**\\n\\n*\u0412\u043e\u043f\u0440\u043e\u0441 2 \u0438\u0437 5*', '{\"context\": \"survey_question\", \"question\": \"q2\"}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.907086Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:44:58.988579Z"}
{"request_id": "d46abcf1-1b78-4688-a47f-57ce47dc1d1d", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:44:58.993519Z"}
{"event": "Update id=40341238 is handled. Duration 204 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:44:58.994282Z"}
{"request_id": "4026c6ce-a82d-4314-9fd1-d65611951397", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "survey:q2:learn", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:45:00.083138Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.086040Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.086989Z"}
{"event": "[cached since 11.92s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.087443Z"}
{"event": "INSERT INTO survey_answers (user_id, question_code, answer_code, points) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::INTEGER) RETURNING survey_answers.id, survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.090795Z"}
{"event": "[cached since 1.293s ago] (1, 'q2', 'learn', 1)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.091184Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.093262Z"}
{"event": "[cached since 1.29s ago] (2,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.093652Z"}
{"user_id": 1, "question": "q2", "answer": "learn", "points": 1, "event": "Survey answer saved", "level": "info", "logger": "app.services.survey_service", "timestamp": "2025-10-09T13:45:00.094790Z"}
{"event": "INSERT INTO events (user_id, type, payload) VALUES ($1::BIGINT, $2::VARCHAR, $3::JSON) RETURNING events.id, events.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.096436Z"}
{"event": "[cached since 5.357s ago] (1, 'survey_answer', '{\"question\": \"q2\", \"answer\": \"learn\", \"points\": 0}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.096819Z"}
{"event": "SELECT events.id, events.user_id, events.type, events.payload, events.created_at \nFROM events \nWHERE events.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.099078Z"}
{"event": "[cached since 5.355s ago] (3,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.099434Z"}
{"event_id": 3, "user_id": 1, "event_type": "survey_answer", "event": "Event created", "level": "info", "logger": "app.services.event_service", "timestamp": "2025-10-09T13:45:00.100296Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.user_id = $1::BIGINT ORDER BY survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.101491Z"}
{"event": "[cached since 1.286s ago] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.101837Z"}
{"event": "INSERT INTO messages (user_id, role, text, meta) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::JSON) RETURNING messages.id, messages.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.174285Z"}
{"event": "[cached since 5.304s ago] (1, <MessageRole.BOT: 'bot'>, '\u041c\u0443\u0434\u0440\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434! \u0417\u043d\u0430\u043d\u0438\u044f \u2014 \u043e\u0441\u043d\u043e\u0432\u0430 \u0443\u0441\u043f\u0435\u0445\u0430 \ud83c\udf93\\n\\n\u2696\ufe0f **\u041a\u0430\u043a \u0442\u044b \u043e\u0442\u043d\u043e\u0441\u0438\u0448\u044c\u0441\u044f \u043a \u0440\u0438\u0441\u043a\u0430\u043c?**\\n\\n*\u0412\u043e\u043f\u0440\u043e\u0441 3 \u0438\u0437 5*', '{\"context\": \"survey_question\", \"question\": \"q3\"}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.174977Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:00.239184Z"}
{"request_id": "4026c6ce-a82d-4314-9fd1-d65611951397", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:45:00.240553Z"}
{"event": "Update id=40341239 is handled. Duration 159 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:45:00.241155Z"}
{"request_id": "f3fef044-5df3-4453-9bf5-2dca0cf8fb3a", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "survey:q3:moderate", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:45:01.199296Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.201540Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.202151Z"}
{"event": "[cached since 13.03s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.202684Z"}
{"event": "INSERT INTO survey_answers (user_id, question_code, answer_code, points) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::INTEGER) RETURNING survey_answers.id, survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.204955Z"}
{"event": "[cached since 2.407s ago] (1, 'q3', 'moderate', 2)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.205494Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.207803Z"}
{"event": "[cached since 2.406s ago] (3,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.209534Z"}
{"user_id": 1, "question": "q3", "answer": "moderate", "points": 2, "event": "Survey answer saved", "level": "info", "logger": "app.services.survey_service", "timestamp": "2025-10-09T13:45:01.211012Z"}
{"event": "INSERT INTO events (user_id, type, payload) VALUES ($1::BIGINT, $2::VARCHAR, $3::JSON) RETURNING events.id, events.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.212176Z"}
{"event": "[cached since 6.473s ago] (1, 'survey_answer', '{\"question\": \"q3\", \"answer\": \"moderate\", \"points\": 0}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.212450Z"}
{"event": "SELECT events.id, events.user_id, events.type, events.payload, events.created_at \nFROM events \nWHERE events.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.214236Z"}
{"event": "[cached since 6.47s ago] (4,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.214594Z"}
{"event_id": 4, "user_id": 1, "event_type": "survey_answer", "event": "Event created", "level": "info", "logger": "app.services.event_service", "timestamp": "2025-10-09T13:45:01.215435Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.user_id = $1::BIGINT ORDER BY survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.216375Z"}
{"event": "[cached since 2.401s ago] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.216668Z"}
{"event": "INSERT INTO messages (user_id, role, text, meta) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::JSON) RETURNING messages.id, messages.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.431313Z"}
{"event": "[cached since 6.561s ago] (1, <MessageRole.BOT: 'bot'>, '\u0421\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434! \ud83d\udc4c\\n\\n\u23f0 **\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0433\u043e\u0442\u043e\u0432 \u0443\u0434\u0435\u043b\u044f\u0442\u044c?**\\n\\n*\u0412\u043e\u043f\u0440\u043e\u0441 4 \u0438\u0437 5*', '{\"context\": \"survey_question\", \"question\": \"q4\"}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.431812Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:01.556279Z"}
{"request_id": "f3fef044-5df3-4453-9bf5-2dca0cf8fb3a", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:45:01.558048Z"}
{"event": "Update id=40341240 is handled. Duration 364 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:45:01.560859Z"}
{"request_id": "68537cd3-9a22-48c3-9bca-49a11a3902a9", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "survey:q4:fulltime", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:45:02.739217Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.743203Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.743722Z"}
{"event": "[cached since 14.58s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.743989Z"}
{"event": "INSERT INTO survey_answers (user_id, question_code, answer_code, points) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::INTEGER) RETURNING survey_answers.id, survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.745580Z"}
{"event": "[cached since 3.948s ago] (1, 'q4', 'fulltime', 3)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.745827Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.748858Z"}
{"event": "[cached since 3.946s ago] (4,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.749274Z"}
{"user_id": 1, "question": "q4", "answer": "fulltime", "points": 3, "event": "Survey answer saved", "level": "info", "logger": "app.services.survey_service", "timestamp": "2025-10-09T13:45:02.750280Z"}
{"event": "INSERT INTO events (user_id, type, payload) VALUES ($1::BIGINT, $2::VARCHAR, $3::JSON) RETURNING events.id, events.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.751949Z"}
{"event": "[cached since 8.013s ago] (1, 'survey_answer', '{\"question\": \"q4\", \"answer\": \"fulltime\", \"points\": 0}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.752328Z"}
{"event": "SELECT events.id, events.user_id, events.type, events.payload, events.created_at \nFROM events \nWHERE events.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.754258Z"}
{"event": "[cached since 8.01s ago] (5,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.754772Z"}
{"event_id": 5, "user_id": 1, "event_type": "survey_answer", "event": "Event created", "level": "info", "logger": "app.services.event_service", "timestamp": "2025-10-09T13:45:02.755781Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.user_id = $1::BIGINT ORDER BY survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.756748Z"}
{"event": "[cached since 3.941s ago] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.756975Z"}
{"event": "INSERT INTO messages (user_id, role, text, meta) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::JSON) RETURNING messages.id, messages.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.848934Z"}
{"event": "[cached since 7.978s ago] (1, <MessageRole.BOT: 'bot'>, '\u0421\u0443\u043f\u0435\u0440! \u0421 \u0442\u0430\u043a\u0438\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043d\u0435 \u0437\u0430\u0441\u0442\u0430\u0432\u044f\u0442 \u0436\u0434\u0430\u0442\u044c \ud83d\ude80\\n\\n\ud83d\udcbc **\u041a\u0430\u043a\u043e\u0439 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u044b\u0439 \u043a\u0430\u043f\u0438\u0442\u0430\u043b \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u0448\u044c?**\\n\\n*\u0412\u043e\u043f\u0440\u043e\u0441 5 \u0438\u0437 5*', '{\"context\": \"survey_question\", \"question\": \"q5\"}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.849243Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:02.937239Z"}
{"request_id": "68537cd3-9a22-48c3-9bca-49a11a3902a9", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:45:02.939331Z"}
{"event": "Update id=40341241 is handled. Duration 201 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:45:02.939907Z"}
{"request_id": "05a32362-a97c-4893-b354-70e627156e8e", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "survey:q5:medium", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:45:04.059320Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.062006Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.063152Z"}
{"event": "[cached since 15.89s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.063540Z"}
{"event": "INSERT INTO survey_answers (user_id, question_code, answer_code, points) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::INTEGER) RETURNING survey_answers.id, survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.066051Z"}
{"event": "[cached since 5.268s ago] (1, 'q5', 'medium', 2)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.066583Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.068562Z"}
{"event": "[cached since 5.266s ago] (5,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.068814Z"}
{"user_id": 1, "question": "q5", "answer": "medium", "points": 2, "event": "Survey answer saved", "level": "info", "logger": "app.services.survey_service", "timestamp": "2025-10-09T13:45:04.069443Z"}
{"event": "INSERT INTO events (user_id, type, payload) VALUES ($1::BIGINT, $2::VARCHAR, $3::JSON) RETURNING events.id, events.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.070280Z"}
{"event": "[cached since 9.331s ago] (1, 'survey_answer', '{\"question\": \"q5\", \"answer\": \"medium\", \"points\": 0}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.070747Z"}
{"event": "SELECT events.id, events.user_id, events.type, events.payload, events.created_at \nFROM events \nWHERE events.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.072167Z"}
{"event": "[cached since 9.328s ago] (6,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.072443Z"}
{"event_id": 6, "user_id": 1, "event_type": "survey_answer", "event": "Event created", "level": "info", "logger": "app.services.event_service", "timestamp": "2025-10-09T13:45:04.073351Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.user_id = $1::BIGINT ORDER BY survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.074162Z"}
{"event": "[cached since 5.259s ago] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.074586Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.user_id = $1::BIGINT ORDER BY survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.075813Z"}
{"event": "[cached since 5.26s ago] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.076040Z"}
{"event": "UPDATE users SET segment=$1::VARCHAR, lead_score=$2::INTEGER, updated_at=now() WHERE users.id = $3::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.079379Z"}
{"event": "[generated in 0.00056s] (<UserSegment.WARM: 'warm'>, 9, 1)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.079746Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.081820Z"}
{"event": "[cached since 9.348s ago] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.082085Z"}
{"user_id": 1, "segment": "warm", "lead_score": 9, "event": "User segment updated", "level": "info", "logger": "app.repositories.user_repository", "timestamp": "2025-10-09T13:45:04.083160Z"}
{"event": "INSERT INTO events (user_id, type, payload) VALUES ($1::BIGINT, $2::VARCHAR, $3::JSON) RETURNING events.id, events.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.084066Z"}
{"event": "[cached since 9.345s ago] (1, 'survey_completed', '{\"total_score\": 9, \"segment\": \"warm\", \"segment_description\": \"\\\\u0418\\\\u043c\\\\u0435\\\\u0435\\\\u0442 \\\\u0431\\\\u0430\\\\u0437\\\\u043e\\\\u0432\\\\u044b\\\\u0435 \\ ... (588 characters truncated) ... \\\\u0430\\\\u043a\\\\u0442\\\\u0438\\\\u0432\\\\u043d\\\\u043e | \\\\ud83d\\\\udc8e 100,000 - 500,000 \\\\u0440\\\\u0443\\\\u0431\\\\u043b\\\\u0435\\\\u0439\", \"answers_count\": 5}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.084350Z"}
{"event": "SELECT events.id, events.user_id, events.type, events.payload, events.created_at \nFROM events \nWHERE events.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.085919Z"}
{"event": "[cached since 9.341s ago] (7,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.086290Z"}
{"event_id": 7, "user_id": 1, "event_type": "survey_completed", "event": "Event created", "level": "info", "logger": "app.services.event_service", "timestamp": "2025-10-09T13:45:04.087290Z"}
{"event": "INSERT INTO messages (user_id, role, text, meta) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::JSON) RETURNING messages.id, messages.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.177555Z"}
{"event": "[cached since 9.307s ago] (1, <MessageRole.BOT: 'bot'>, '\u0425\u043e\u0440\u043e\u0448\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0430 \ud83d\udc8e\\n\\n\ud83c\udf89 **\u0410\u043d\u043a\u0435\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430!**\\n\\n\ud83d\udcca **\u0422\u0432\u043e\u0439 \u043f\u0440\u043e\u0444\u0438\u043b\u044c:**\\n\ud83d\udc76 \u0421\u043e\u0432\u0441\u0435\u043c \u043d\u043e\u0432\u0438\u0447\u043e\u043a | \ud83d\udcda \u0418\u0437\u0443\u0447\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u044b | \u2696\ufe0f \u0423\u043c\u0435\u0440\u0435\u043d\u043d\u044b\u0435 \u0440\u0438\u0441\u043a\u0438 \u0440\u0430\u0434 ... (94 characters truncated) ... \u0437\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u043d\u0438\u044f\\n\ud83d\udcc8 **\u0411\u0430\u043b\u043b \u0433\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u0438:** 9/15\\n\\n\ud83d\udca1 *\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0432\u043e\u0438\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u044f \u043f\u043e\u0434\u0431\u0435\u0440\u0443 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f!*\\n\\n\u0414\u0430\u0432\u0430\u0439 \u043e\u0431\u0441\u0443\u0434\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438? \ud83d\ude80', '{\"context\": \"survey_complete\", \"segment\": \"warm\", \"score\": 9}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.178069Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:04.237547Z"}
{"request_id": "05a32362-a97c-4893-b354-70e627156e8e", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:45:04.239588Z"}
{"event": "Update id=40341242 is handled. Duration 182 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:45:04.240179Z"}
{"request_id": "f929fb05-616a-4a1e-b5ec-932a9b75ae92", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "data": "survey:q5:small", "event": "Incoming callback query", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:45:23.140818Z"}
{"event": "BEGIN (implicit)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.143424Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.telegram_id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.144233Z"}
{"event": "[cached since 34.98s ago] (5481270774,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.144602Z"}
{"event": "INSERT INTO survey_answers (user_id, question_code, answer_code, points) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::INTEGER) RETURNING survey_answers.id, survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.146712Z"}
{"event": "[cached since 24.35s ago] (1, 'q5', 'small', 1)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.147065Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.148874Z"}
{"event": "[cached since 24.35s ago] (6,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.149166Z"}
{"user_id": 1, "question": "q5", "answer": "small", "points": 1, "event": "Survey answer saved", "level": "info", "logger": "app.services.survey_service", "timestamp": "2025-10-09T13:45:23.149955Z"}
{"event": "INSERT INTO events (user_id, type, payload) VALUES ($1::BIGINT, $2::VARCHAR, $3::JSON) RETURNING events.id, events.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.151084Z"}
{"event": "[cached since 28.41s ago] (1, 'survey_answer', '{\"question\": \"q5\", \"answer\": \"small\", \"points\": 0}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.151347Z"}
{"event": "SELECT events.id, events.user_id, events.type, events.payload, events.created_at \nFROM events \nWHERE events.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.152853Z"}
{"event": "[cached since 28.41s ago] (8,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.153122Z"}
{"event_id": 8, "user_id": 1, "event_type": "survey_answer", "event": "Event created", "level": "info", "logger": "app.services.event_service", "timestamp": "2025-10-09T13:45:23.153866Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.user_id = $1::BIGINT ORDER BY survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.155080Z"}
{"event": "[cached since 24.34s ago] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.155370Z"}
{"event": "SELECT survey_answers.id, survey_answers.user_id, survey_answers.question_code, survey_answers.answer_code, survey_answers.points, survey_answers.created_at \nFROM survey_answers \nWHERE survey_answers.user_id = $1::BIGINT ORDER BY survey_answers.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.156847Z"}
{"event": "[cached since 24.34s ago] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.157074Z"}
{"event": "UPDATE users SET lead_score=$1::INTEGER, updated_at=now() WHERE users.id = $2::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.159199Z"}
{"event": "[generated in 0.00043s] (10, 1)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.159497Z"}
{"event": "SELECT users.id, users.telegram_id, users.username, users.first_name, users.last_name, users.phone, users.email, users.segment, users.lead_score, users.funnel_stage, users.source, users.is_blocked, users.created_at, users.updated_at \nFROM users \nWHERE users.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.161882Z"}
{"event": "[cached since 28.43s ago] (1,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.162418Z"}
{"user_id": 1, "segment": "warm", "lead_score": 10, "event": "User segment updated", "level": "info", "logger": "app.repositories.user_repository", "timestamp": "2025-10-09T13:45:23.163769Z"}
{"event": "INSERT INTO events (user_id, type, payload) VALUES ($1::BIGINT, $2::VARCHAR, $3::JSON) RETURNING events.id, events.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.164796Z"}
{"event": "[cached since 28.43s ago] (1, 'survey_completed', '{\"total_score\": 10, \"segment\": \"warm\", \"segment_description\": \"\\\\u0418\\\\u043c\\\\u0435\\\\u0435\\\\u0442 \\\\u0431\\\\u0430\\\\u0437\\\\u043e\\\\u0432\\\\u044b\\\\u0435  ... (672 characters truncated) ... 0 \\\\u0440\\\\u0443\\\\u0431\\\\u043b\\\\u0435\\\\u0439 | \\\\ud83d\\\\udcb0 \\\\u0414\\\\u043e 100,000 \\\\u0440\\\\u0443\\\\u0431\\\\u043b\\\\u0435\\\\u0439\", \"answers_count\": 6}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.165163Z"}
{"event": "SELECT events.id, events.user_id, events.type, events.payload, events.created_at \nFROM events \nWHERE events.id = $1::BIGINT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.168376Z"}
{"event": "[cached since 28.42s ago] (9,)", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.168674Z"}
{"event_id": 9, "user_id": 1, "event_type": "survey_completed", "event": "Event created", "level": "info", "logger": "app.services.event_service", "timestamp": "2025-10-09T13:45:23.169477Z"}
{"event": "INSERT INTO messages (user_id, role, text, meta) VALUES ($1::BIGINT, $2::VARCHAR, $3::VARCHAR, $4::JSON) RETURNING messages.id, messages.created_at", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.366253Z"}
{"event": "[cached since 28.5s ago] (1, <MessageRole.BOT: 'bot'>, '\u041e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 \u043d\u0430\u0447\u0430\u043b\u043e! \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u2014 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u043d\u0438\u044f \ud83d\udca1\\n\\n\ud83c\udf89 **\u0410\u043d\u043a\u0435\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430!**\\n\\n\ud83d\udcca **\u0422\u0432\u043e\u0439 \u043f\u0440\u043e\u0444\u0438\u043b\u044c:**\\n\ud83d\udc76 \u0421\u043e\u0432\u0441\u0435\u043c \u043d\u043e\u0432\u0438\u0447\u043e\u043a | \ud83d\udcda \u0418\u0437\u0443\u0447\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u044b | \u2696\ufe0f \u0423\u043c\u0435\u0440\u0435\u043d\u043d\u044b\u0435  ... (126 characters truncated) ... \u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u043d\u0438\u044f\\n\ud83d\udcc8 **\u0411\u0430\u043b\u043b \u0433\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u0438:** 10/15\\n\\n\ud83d\udca1 *\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0432\u043e\u0438\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u044f \u043f\u043e\u0434\u0431\u0435\u0440\u0443 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f!*\\n\\n\u0414\u0430\u0432\u0430\u0439 \u043e\u0431\u0441\u0443\u0434\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438? \ud83d\ude80', '{\"context\": \"survey_complete\", \"segment\": \"warm\", \"score\": 10}')", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.367012Z"}
{"event": "COMMIT", "level": "info", "logger": "sqlalchemy.engine.Engine", "timestamp": "2025-10-09T13:45:23.450834Z"}
{"request_id": "f929fb05-616a-4a1e-b5ec-932a9b75ae92", "user_id": 5481270774, "username": "aawwwaww", "event_type": "CallbackQuery", "event": "Event processed successfully", "level": "info", "logger": "app.middlewares.logging", "timestamp": "2025-10-09T13:45:23.467471Z"}
{"event": "Update id=40341243 is handled. Duration 328 ms by bot id=8490095311", "level": "info", "logger": "aiogram.event", "timestamp": "2025-10-09T13:45:23.468150Z"}
